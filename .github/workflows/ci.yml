name: ci

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command: [compile-linux, compile-windows, compile-darwin]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Check out code
        uses: actions/checkout@v2

      - name: Package custom resources
        run: make package-custom-resources

      - name: Build binaries
        run: make ${{matrix.command}}

      - name: Cleanup
        run: make package-custom-resources-clean

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: make test

      - name: Upload golang coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out

      - name: Upload node coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          directory: cf-custom-resources/

  test-race:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: make test-race

  integ-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: make local-integ-test

  staticcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.46.2
          args: --timeout 5m0s

  license:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run license check
        run: ./scripts/license.sh .

  conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - name: validate
        uses: actions/github-script@v6
        with:
          script: |
            // See https://gist.github.com/marcojahn/482410b728c31b221b70ea6d2c433f0c#file-conventional-commit-regex-md
            const regex = /^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\([\w\-\.]+\))?(!)?: ([\w ])+([\s\S]*)/g;

            const pr = context.payload.pull_request;
            const title = pr.title;

            if (title.match(regex) == null) {
              throw `PR title "${title}"" does not match conventional commits from https://www.conventionalcommits.org/en/v1.0.0/`
            }

  binsize:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Check out mainline
        uses: actions/checkout@v3
        with:
          ref: mainline

      - name: Compute old release binary sizes
        id: old-bins
        run: |
          make release
          echo "MAC_AMD_KIB=$(du -k ./bin/local/copilot-darwin-amd64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "MAC_ARM_KIB=$(du -k ./bin/local/copilot-darwin-arm64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "LINUX_AMD_KIB=$(du -k ./bin/local/copilot-linux-amd64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "LINUX_ARM_KIB=$(du -k ./bin/local/copilot-linux-arm64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "WINDOWS_AMD_KIB=$(du -k ./bin/local/copilot.exe | awk '{ print $1}')" >> $GITHUB_OUTPUT
          
      - name: Check out PR commit
        uses: actions/checkout@v3

      - name: Compute new release binary sizes
        id: new-bins
        run: |
          make release
          echo "MAC_AMD_KIB=$(du -k ./bin/local/copilot-darwin-amd64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "MAC_ARM_KIB=$(du -k ./bin/local/copilot-darwin-arm64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "LINUX_AMD_KIB=$(du -k ./bin/local/copilot-linux-amd64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "LINUX_ARM_KIB=$(du -k ./bin/local/copilot-linux-arm64 | awk '{ print $1}')" >> $GITHUB_OUTPUT
          echo "WINDOWS_AMD_KIB=$(du -k ./bin/local/copilot.exe | awk '{ print $1}')" >> $GITHUB_OUTPUT

      - name: Calculate size change
        id: diff
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const diff = (old, cur) => {
              const res = (cur-old)/old * 100;
              return res.toFixed(2); // 2 decimal places.
            };
            
            const dat = {
              'macOS': {
                'amd': {
                  'old': parseFloat(${{ steps.old-bins.outputs.MAC_AMD_KIB }}),
                  'cur': parseFloat(${{ steps.new-bins.outputs.MAC_AMD_KIB }}),
                },
                'arm': {
                  'old': parseFloat(${{ steps.old-bins.outputs.MAC_ARM_KIB }}),
                  'cur': parseFloat(${{ steps.new-bins.outputs.MAC_AMD_KIB }}),
                },
              },
              'linux': {
                'amd': {
                  'old': parseFloat(${{ steps.old-bins.outputs.LINUX_AMD_KIB }}),
                  'cur': parseFloat(${{ steps.new-bins.outputs.LINUX_AMD_KIB }}),
                },
                'arm': {
                  'old': parseFloat(${{ steps.old-bins.outputs.LINUX_ARM_KIB }}),
                  'cur': parseFloat(${{ steps.new-bins.outputs.LINUX_AMD_KIB }}),
                },
              },
              'windows': {
                'amd': {
                  'old': parseFloat(${{ steps.old-bins.outputs.WINDOWS_AMD_KIB }}),
                  'cur': parseFloat(${{ steps.new-bins.outputs.WINDOWS_AMD_KIB }}),
                },
              },
            };
            
            let msg = `
              üçï Here are the new binary sizes!
            
              | Name | New size (kiB) | mainline size (kiB) | Delta |
              |:--   |:---            |:---                    |:--    |
            `;
            
            for (const os of Object.keys(dat)) {
              for (const arch of Object.keys(dat)) {
                const delta = diff(dat[os][arch].old, dat[os][arch].cur);
                msg += `| ${os} (${arch})` | ${dat[os][arch].cur} | ${dat[os][arch].old} | ${delta} |
                `;
              }
            }
            
            return msg;
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{steps.diff.outputs.result}}