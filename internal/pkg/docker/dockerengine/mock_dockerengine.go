// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/docker/dockerengine/dockerengine.go

// Package dockerengine is a generated GoMock package.
package dockerengine

import (
	context "context"
	reflect "reflect"

	exec "github.com/aws/copilot-cli/internal/pkg/exec"
	gomock "github.com/golang/mock/gomock"
)

// MockCmd is a mock of Cmd interface.
type MockCmd struct {
	ctrl     *gomock.Controller
	recorder *MockCmdMockRecorder
}

// MockCmdMockRecorder is the mock recorder for MockCmd.
type MockCmdMockRecorder struct {
	mock *MockCmd
}

// NewMockCmd creates a new mock instance.
func NewMockCmd(ctrl *gomock.Controller) *MockCmd {
	mock := &MockCmd{ctrl: ctrl}
	mock.recorder = &MockCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmd) EXPECT() *MockCmdMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCmd) Run(name string, args []string, options ...exec.CmdOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, args}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCmdMockRecorder) Run(name, args interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, args}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmd)(nil).Run), varargs...)
}

// RunWithContext mocks base method.
func (m *MockCmd) RunWithContext(ctx context.Context, name string, args []string, opts ...exec.CmdOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, args}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext.
func (mr *MockCmdMockRecorder) RunWithContext(ctx, name, args interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, args}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockCmd)(nil).RunWithContext), varargs...)
}

// MockexitCodeError is a mock of exitCodeError interface.
type MockexitCodeError struct {
	ctrl     *gomock.Controller
	recorder *MockexitCodeErrorMockRecorder
}

// MockexitCodeErrorMockRecorder is the mock recorder for MockexitCodeError.
type MockexitCodeErrorMockRecorder struct {
	mock *MockexitCodeError
}

// NewMockexitCodeError creates a new mock instance.
func NewMockexitCodeError(ctrl *gomock.Controller) *MockexitCodeError {
	mock := &MockexitCodeError{ctrl: ctrl}
	mock.recorder = &MockexitCodeErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexitCodeError) EXPECT() *MockexitCodeErrorMockRecorder {
	return m.recorder
}

// ExitCode mocks base method.
func (m *MockexitCodeError) ExitCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ExitCode indicates an expected call of ExitCode.
func (mr *MockexitCodeErrorMockRecorder) ExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitCode", reflect.TypeOf((*MockexitCodeError)(nil).ExitCode))
}
