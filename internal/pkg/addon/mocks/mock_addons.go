// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/addon/addons.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceAddonsReader is a mock of WorkspaceAddonsReader interface.
type MockWorkspaceAddonsReader struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceAddonsReaderMockRecorder
}

// MockWorkspaceAddonsReaderMockRecorder is the mock recorder for MockWorkspaceAddonsReader.
type MockWorkspaceAddonsReaderMockRecorder struct {
	mock *MockWorkspaceAddonsReader
}

// NewMockWorkspaceAddonsReader creates a new mock instance.
func NewMockWorkspaceAddonsReader(ctrl *gomock.Controller) *MockWorkspaceAddonsReader {
	mock := &MockWorkspaceAddonsReader{ctrl: ctrl}
	mock.recorder = &MockWorkspaceAddonsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceAddonsReader) EXPECT() *MockWorkspaceAddonsReaderMockRecorder {
	return m.recorder
}

// EnvAddonFileAbsPath mocks base method.
func (m *MockWorkspaceAddonsReader) EnvAddonFileAbsPath(fName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvAddonFileAbsPath", fName)
	ret0, _ := ret[0].(string)
	return ret0
}

// EnvAddonFileAbsPath indicates an expected call of EnvAddonFileAbsPath.
func (mr *MockWorkspaceAddonsReaderMockRecorder) EnvAddonFileAbsPath(fName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvAddonFileAbsPath", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).EnvAddonFileAbsPath), fName)
}

// EnvAddonsAbsPath mocks base method.
func (m *MockWorkspaceAddonsReader) EnvAddonsAbsPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvAddonsAbsPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// EnvAddonsAbsPath indicates an expected call of EnvAddonsAbsPath.
func (mr *MockWorkspaceAddonsReaderMockRecorder) EnvAddonsAbsPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvAddonsAbsPath", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).EnvAddonsAbsPath))
}

// ListFiles mocks base method.
func (m *MockWorkspaceAddonsReader) ListFiles(dirPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", dirPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockWorkspaceAddonsReaderMockRecorder) ListFiles(dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).ListFiles), dirPath)
}

// ReadFile mocks base method.
func (m *MockWorkspaceAddonsReader) ReadFile(fPath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", fPath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockWorkspaceAddonsReaderMockRecorder) ReadFile(fPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).ReadFile), fPath)
}

// WorkloadAddonFileAbsPath mocks base method.
func (m *MockWorkspaceAddonsReader) WorkloadAddonFileAbsPath(wkldName, fName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadAddonFileAbsPath", wkldName, fName)
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadAddonFileAbsPath indicates an expected call of WorkloadAddonFileAbsPath.
func (mr *MockWorkspaceAddonsReaderMockRecorder) WorkloadAddonFileAbsPath(wkldName, fName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadAddonFileAbsPath", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).WorkloadAddonFileAbsPath), wkldName, fName)
}

// WorkloadAddonsAbsPath mocks base method.
func (m *MockWorkspaceAddonsReader) WorkloadAddonsAbsPath(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadAddonsAbsPath", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadAddonsAbsPath indicates an expected call of WorkloadAddonsAbsPath.
func (mr *MockWorkspaceAddonsReaderMockRecorder) WorkloadAddonsAbsPath(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadAddonsAbsPath", reflect.TypeOf((*MockWorkspaceAddonsReader)(nil).WorkloadAddonsAbsPath), name)
}
