// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/addon/addons.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockworkspaceReader is a mock of workspaceReader interface.
type MockworkspaceReader struct {
	ctrl     *gomock.Controller
	recorder *MockworkspaceReaderMockRecorder
}

// MockworkspaceReaderMockRecorder is the mock recorder for MockworkspaceReader.
type MockworkspaceReaderMockRecorder struct {
	mock *MockworkspaceReader
}

// NewMockworkspaceReader creates a new mock instance.
func NewMockworkspaceReader(ctrl *gomock.Controller) *MockworkspaceReader {
	mock := &MockworkspaceReader{ctrl: ctrl}
	mock.recorder = &MockworkspaceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkspaceReader) EXPECT() *MockworkspaceReaderMockRecorder {
	return m.recorder
}

// ListFiles mocks base method.
func (m *MockworkspaceReader) ListFiles(dirPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", dirPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockworkspaceReaderMockRecorder) ListFiles(dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockworkspaceReader)(nil).ListFiles), dirPath)
}

// ReadFile mocks base method.
func (m *MockworkspaceReader) ReadFile(fPath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", fPath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockworkspaceReaderMockRecorder) ReadFile(fPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockworkspaceReader)(nil).ReadFile), fPath)
}

// WorkloadAddonFilePath mocks base method.
func (m *MockworkspaceReader) WorkloadAddonFilePath(wkldName, fName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadAddonFilePath", wkldName, fName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadAddonFilePath indicates an expected call of WorkloadAddonFilePath.
func (mr *MockworkspaceReaderMockRecorder) WorkloadAddonFilePath(wkldName, fName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadAddonFilePath", reflect.TypeOf((*MockworkspaceReader)(nil).WorkloadAddonFilePath), wkldName, fName)
}

// WorkloadAddonsPath mocks base method.
func (m *MockworkspaceReader) WorkloadAddonsPath(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadAddonsPath", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadAddonsPath indicates an expected call of WorkloadAddonsPath.
func (mr *MockworkspaceReaderMockRecorder) WorkloadAddonsPath(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadAddonsPath", reflect.TypeOf((*MockworkspaceReader)(nil).WorkloadAddonsPath), name)
}
