// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/deploy/cloudformation/stack/rd_web_svc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	template "github.com/aws/copilot-cli/internal/pkg/template"
	gomock "github.com/golang/mock/gomock"
)

// MockrequestDrivenWebSvcReadParser is a mock of requestDrivenWebSvcReadParser interface.
type MockrequestDrivenWebSvcReadParser struct {
	ctrl     *gomock.Controller
	recorder *MockrequestDrivenWebSvcReadParserMockRecorder
}

// MockrequestDrivenWebSvcReadParserMockRecorder is the mock recorder for MockrequestDrivenWebSvcReadParser.
type MockrequestDrivenWebSvcReadParserMockRecorder struct {
	mock *MockrequestDrivenWebSvcReadParser
}

// NewMockrequestDrivenWebSvcReadParser creates a new mock instance.
func NewMockrequestDrivenWebSvcReadParser(ctrl *gomock.Controller) *MockrequestDrivenWebSvcReadParser {
	mock := &MockrequestDrivenWebSvcReadParser{ctrl: ctrl}
	mock.recorder = &MockrequestDrivenWebSvcReadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestDrivenWebSvcReadParser) EXPECT() *MockrequestDrivenWebSvcReadParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockrequestDrivenWebSvcReadParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockrequestDrivenWebSvcReadParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockrequestDrivenWebSvcReadParser)(nil).Parse), varargs...)
}

// ParseRequestDrivenWebService mocks base method.
func (m *MockrequestDrivenWebSvcReadParser) ParseRequestDrivenWebService(arg0 template.WorkloadOpts) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequestDrivenWebService", arg0)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequestDrivenWebService indicates an expected call of ParseRequestDrivenWebService.
func (mr *MockrequestDrivenWebSvcReadParserMockRecorder) ParseRequestDrivenWebService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequestDrivenWebService", reflect.TypeOf((*MockrequestDrivenWebSvcReadParser)(nil).ParseRequestDrivenWebService), arg0)
}

// Read mocks base method.
func (m *MockrequestDrivenWebSvcReadParser) Read(path string) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockrequestDrivenWebSvcReadParserMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockrequestDrivenWebSvcReadParser)(nil).Read), path)
}
