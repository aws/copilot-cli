// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/deploy/cloudformation/stack/worker_svc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	template "github.com/aws/copilot-cli/internal/pkg/template"
	gomock "github.com/golang/mock/gomock"
)

// MockworkerSvcReadParser is a mock of workerSvcReadParser interface.
type MockworkerSvcReadParser struct {
	ctrl     *gomock.Controller
	recorder *MockworkerSvcReadParserMockRecorder
}

// MockworkerSvcReadParserMockRecorder is the mock recorder for MockworkerSvcReadParser.
type MockworkerSvcReadParserMockRecorder struct {
	mock *MockworkerSvcReadParser
}

// NewMockworkerSvcReadParser creates a new mock instance.
func NewMockworkerSvcReadParser(ctrl *gomock.Controller) *MockworkerSvcReadParser {
	mock := &MockworkerSvcReadParser{ctrl: ctrl}
	mock.recorder = &MockworkerSvcReadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkerSvcReadParser) EXPECT() *MockworkerSvcReadParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockworkerSvcReadParser) Parse(path string, data interface{}, options ...template.ParseOption) (*template.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockworkerSvcReadParserMockRecorder) Parse(path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockworkerSvcReadParser)(nil).Parse), varargs...)
}

// ParseWorkerService mocks base method.
func (m *MockworkerSvcReadParser) ParseWorkerService(arg0 template.WorkloadOpts) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWorkerService", arg0)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWorkerService indicates an expected call of ParseWorkerService.
func (mr *MockworkerSvcReadParserMockRecorder) ParseWorkerService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWorkerService", reflect.TypeOf((*MockworkerSvcReadParser)(nil).ParseWorkerService), arg0)
}

// Read mocks base method.
func (m *MockworkerSvcReadParser) Read(path string) (*template.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*template.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockworkerSvcReadParserMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockworkerSvcReadParser)(nil).Read), path)
}
