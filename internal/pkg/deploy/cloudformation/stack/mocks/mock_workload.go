// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/deploy/cloudformation/stack/workload.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cloudformation "github.com/aws/aws-sdk-go/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
)

// Mockaddons is a mock of addons interface.
type Mockaddons struct {
	ctrl     *gomock.Controller
	recorder *MockaddonsMockRecorder
}

// MockaddonsMockRecorder is the mock recorder for Mockaddons.
type MockaddonsMockRecorder struct {
	mock *Mockaddons
}

// NewMockaddons creates a new mock instance.
func NewMockaddons(ctrl *gomock.Controller) *Mockaddons {
	mock := &Mockaddons{ctrl: ctrl}
	mock.recorder = &MockaddonsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockaddons) EXPECT() *MockaddonsMockRecorder {
	return m.recorder
}

// Parameters mocks base method.
func (m *Mockaddons) Parameters() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parameters indicates an expected call of Parameters.
func (mr *MockaddonsMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*Mockaddons)(nil).Parameters))
}

// Template mocks base method.
func (m *Mockaddons) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockaddonsMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*Mockaddons)(nil).Template))
}

// Mocklocation is a mock of location interface.
type Mocklocation struct {
	ctrl     *gomock.Controller
	recorder *MocklocationMockRecorder
}

// MocklocationMockRecorder is the mock recorder for Mocklocation.
type MocklocationMockRecorder struct {
	mock *Mocklocation
}

// NewMocklocation creates a new mock instance.
func NewMocklocation(ctrl *gomock.Controller) *Mocklocation {
	mock := &Mocklocation{ctrl: ctrl}
	mock.recorder = &MocklocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklocation) EXPECT() *MocklocationMockRecorder {
	return m.recorder
}

// GetLocation mocks base method.
func (m *Mocklocation) GetLocation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MocklocationMockRecorder) GetLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*Mocklocation)(nil).GetLocation))
}

// MocktemplateConfigurer is a mock of templateConfigurer interface.
type MocktemplateConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MocktemplateConfigurerMockRecorder
}

// MocktemplateConfigurerMockRecorder is the mock recorder for MocktemplateConfigurer.
type MocktemplateConfigurerMockRecorder struct {
	mock *MocktemplateConfigurer
}

// NewMocktemplateConfigurer creates a new mock instance.
func NewMocktemplateConfigurer(ctrl *gomock.Controller) *MocktemplateConfigurer {
	mock := &MocktemplateConfigurer{ctrl: ctrl}
	mock.recorder = &MocktemplateConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktemplateConfigurer) EXPECT() *MocktemplateConfigurerMockRecorder {
	return m.recorder
}

// Parameters mocks base method.
func (m *MocktemplateConfigurer) Parameters() ([]*cloudformation.Parameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].([]*cloudformation.Parameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parameters indicates an expected call of Parameters.
func (mr *MocktemplateConfigurerMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MocktemplateConfigurer)(nil).Parameters))
}

// Tags mocks base method.
func (m *MocktemplateConfigurer) Tags() []*cloudformation.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]*cloudformation.Tag)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MocktemplateConfigurerMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MocktemplateConfigurer)(nil).Tags))
}
