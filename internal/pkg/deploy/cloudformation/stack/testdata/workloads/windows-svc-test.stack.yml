# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a load balanced web service on Amazon ECS.
Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  RulePath:
    Type: String
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  HTTPSEnabled:
    AllowedValues: [true, false]
    Type: String
  DNSDelegated:
    AllowedValues: [true, false]
    Type: String
  LogRetention:
    Type: Number
  AddonsTemplateURL:
    Description: 'URL of the addons nested stack template within the S3 bucket.'
    Type: String
    Default: ""
  EnvFileARN:
    Description: 'URL of the environment file.'
    Type: String
    Default: ""
  TargetContainer:
    Type: String
  TargetPort:
    Type: Number
  Stickiness:
    Type: String
    Default: false
Conditions:
  HTTPLoadBalancer:
    !Not
      - !Condition HTTPSLoadBalancer
  HTTPSLoadBalancer:
    !Equals [!Ref HTTPSEnabled, true]
  HasAssociatedDomain:
    !Equals [!Ref DNSDelegated, true]
  HasAddons:
    !Not [!Equals [!Ref AddonsTemplateURL, ""]]
  HasEnvFile:
    !Not [!Equals [!Ref EnvFileARN, ""]]
  IsDefaultRootPath:
    !Equals [!Ref RulePath, "/"]
Resources:
  LogGroup:
    Metadata:
      'aws:copilot:description': 'A CloudWatch log group to hold your service logs'
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/copilot/, !Ref AppName, '-', !Ref EnvName, '-', !Ref WorkloadName]]
      RetentionInDays: LogRetention

  TaskDefinition:
    Metadata:
      'aws:copilot:description': 'An ECS task definition to group your containers and run them on ECS'
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join ['', [!Ref AppName, '-', !Ref EnvName, '-', !Ref WorkloadName]]
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: WINDOWS_SERVER_2019_CORE
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: TaskCPU
      Memory: TaskMemory
      ExecutionRoleArn: ExecutionRole.Arn
      TaskRoleArn: TaskRole.Arn
      ContainerDefinitions:
        - Name: WorkloadName
          Image: ContainerImage
          Environment:
            - Name: COPILOT_APPLICATION_NAME
              Value: '${AppName}'
            - Name: COPILOT_SERVICE_DISCOVERY_ENDPOINT
              Value: 'test.my-app.local'
            - Name: COPILOT_ENVIRONMENT_NAME
              Value: '${EnvName}'
            - Name: COPILOT_SERVICE_NAME
              Value: '${WorkloadName}'
            - Name: COPILOT_LB_DNS
              Value: EnvControllerAction.PublicLoadBalancerDNSName
          EnvironmentFiles:
          - !If
            - HasEnvFile
            - Type: s3
              Value: !Ref EnvFileARN
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: LogGroup
              awslogs-region: AWS::Region
              awslogs-stream-prefix: copilot
          PortMappings:
            - ContainerPort: ContainerPort
  ExecutionRole:
    Metadata:
      'aws:copilot:description': 'An IAM Role for the Fargate agent to make AWS API calls on your behalf'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ['', [!Ref AppName, '-', !Ref EnvName, '-', !Ref WorkloadName, SecretsPolicy]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameters'
                Resource:
                  - 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
                Condition:
                  StringEquals:
                    'ssm:ResourceTag/copilot-application': '${AppName}'
                    'ssm:ResourceTag/copilot-environment': '${EnvName}'
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    'secretsmanager:ResourceTag/copilot-application': '${AppName}'
                    'secretsmanager:ResourceTag/copilot-environment': '${EnvName}'
              - Effect: 'Allow'
                Action:
                  - 'kms:Decrypt'
                Resource:
                  - 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*'
        - !If
          - HasEnvFile
          - PolicyName: !Join ['', [!Ref AppName, '-', !Ref EnvName, '-', !Ref WorkloadName, GetEnvFilePolicy]]
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 's3:GetObject'
                  Resource:
                    - !Ref EnvFileARN
                - Effect: 'Allow'
                  Action:
                    - 's3:GetBucketLocation'
                  Resource:
                    - !Join
                      - ''
                      - - 'arn:'
                        - !Ref AWS::Partition
                        - ':s3:::'
                        - !Select [0, !Split ['/', !Select [5, !Split [':', !Ref EnvFileARN]]]]
          - !Ref AWS::NoValue
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Metadata:
      'aws:copilot:description': 'An IAM role to control permissions for the containers in your tasks'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'DenyIAMExceptTaggedRoles'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Deny'
                Action: 'iam:*'
                Resource: '*'
              - Effect: Allow
                Action: 'sts:AssumeRole'
                Resource:
                  - 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*'
                Condition:
                  StringEquals:
                    'iam:ResourceTag/copilot-application': !Sub '${AppName}'
                    'iam:ResourceTag/copilot-environment': !Sub '${EnvName}'

  DiscoveryService:
    Metadata:
      'aws:copilot:description': 'Service discovery for your services to communicate within the VPC'
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Copilot services
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
          - TTL: 10
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: WorkloadName
      NamespaceId:
        Fn::ImportValue:
           !Sub '${AppName}-${EnvName}-ServiceDiscoveryNamespaceID'
  EnvControllerAction:
    Metadata:
      'aws:copilot:description': "Update your environment's shared resources"
    Type: Custom::EnvControllerFunction
    Properties:
      ServiceToken: EnvControllerFunction.Arn
      Workload: WorkloadName
      EnvStack: ${AppName}-${EnvName}
      Parameters: [ALBWorkloads, Aliases]

  EnvControllerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          mockEnvControllerZipFile
      Handler: "index.handler"
      Timeout: 900
      MemorySize: 512
      Role: 'EnvControllerRole.Arn'
      Runtime: nodejs12.x

  EnvControllerRole:
    Metadata:
      'aws:copilot:description': "An IAM role to update your environment stack"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: 'EnvControllerStackUpdate'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - cloudformation:DescribeStacks
                - cloudformation:UpdateStack
              Resource: 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}-${EnvName}/*'
              Condition:
                StringEquals:
                  'cloudformation:ResourceTag/copilot-application': !Sub '${AppName}'
                  'cloudformation:ResourceTag/copilot-environment': !Sub '${EnvName}'
        - PolicyName: "EnvControllerRolePass"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AppName}-${EnvName}-CFNExecutionRole'
              Condition:
                StringEquals:
                  'iam:ResourceTag/copilot-application': !Sub '${AppName}'
                  'iam:ResourceTag/copilot-environment': !Sub '${EnvName}'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Service:
    Metadata:
      'aws:copilot:description': 'An ECS service to run and maintain your tasks in the environment cluster'
    Type: AWS::ECS::Service
    DependsOn:
      - WaitUntilListenerRuleIsCreated
    Properties:
      PlatformVersion: 1.0.0
      Cluster:
        Fn::ImportValue:
          !Sub '${AppName}-${EnvName}-ClusterId'
      TaskDefinition: TaskDefinition
      DesiredCount: TaskCount
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      PropagateTags: SERVICE
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: TargetContainer
          ContainerPort: TargetPort
          TargetGroupArn: TargetGroup
      ServiceRegistries:
        - RegistryArn: DiscoveryService.Arn
          Port: ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            Fn::Split:
              - ','
              - Fn::ImportValue: '${AppName}-${EnvName}-PublicSubnets'
          SecurityGroups:
            - Fn::ImportValue: '${AppName}-${EnvName}-EnvironmentSecurityGroup'

  TargetGroup:
    Metadata:
      'aws:copilot:description': 'A target group to connect the load balancer to your service'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Port: ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: stickiness.enabled
          Value: Stickiness
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub '${AppName}-${EnvName}-VpcId'

  LoadBalancerDNSAlias:
    Metadata:
      'aws:copilot:description': !Sub 'The default alias record for the application load balancer'
    Type: AWS::Route53::RecordSetGroup
    Condition: HTTPSLoadBalancer
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub "${AppName}-${EnvName}-HostedZone"
      Comment: !Sub "Default application load balancer alias for service ${WorkloadName}"
      RecordSets:
      - Name:
          !Join
            - '.'
            - - WorkloadName
              - Fn::ImportValue:
                  !Sub "${AppName}-${EnvName}-SubDomain"
              - ""
        Type: A
        AliasTarget:
          HostedZoneId: EnvControllerAction.PublicLoadBalancerHostedZone
          DNSName: EnvControllerAction.PublicLoadBalancerDNSName

  RulePriorityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          mockRulePriorityZipFile
      Handler: "index.nextAvailableRulePriorityHandler"
      Timeout: 600
      MemorySize: 512
      Role: 'CustomResourceRole.Arn'
      Runtime: nodejs12.x

  CustomResourceRole:
    Metadata:
      'aws:copilot:description': 'An IAM role used by custom resources to describe your ECS service'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: 'DNSandACMAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeRules
                Resource: "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HTTPSRulePriorityAction:
    Metadata:
      'aws:copilot:description': 'A custom resource assigning priority for HTTPS listener rules'
    Condition: HTTPSLoadBalancer
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: RulePriorityFunction.Arn
      ListenerArn: EnvControllerAction.HTTPSListenerArn

  HTTPListenerRuleWithDomain:
    Metadata:
      'aws:copilot:description': 'An HTTP listener rule that redirects HTTP to HTTPS'
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPSLoadBalancer
    Properties:
      Actions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_301
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values:
              - Fn::Join:
                - '.'
                - - WorkloadName
                  - Fn::ImportValue:
                      !Sub "${AppName}-${EnvName}-SubDomain"
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
                - IsDefaultRootPath
                -
                  - "/*"
                -
                  - !Sub "/${RulePath}"
                  - !Sub "/${RulePath}/*"
      ListenerArn: EnvControllerAction.HTTPListenerArn
      Priority: HTTPSRulePriorityAction.Priority

  HTTPRulePriorityAction:
    Metadata:
      'aws:copilot:description': 'A custom resource assigning priority for HTTP listener rules'
    Condition: HTTPLoadBalancer
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: RulePriorityFunction.Arn
      ListenerArn: EnvControllerAction.HTTPListenerArn

  HTTPSListenerRule:
    Metadata:
      'aws:copilot:description': 'An HTTPS listener rule for forwarding HTTPS traffic to your tasks'
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPSLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: TargetGroup
          Type: forward
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values:
              - Fn::Join:
                - '.'
                - - WorkloadName
                  - Fn::ImportValue:
                      !Sub "${AppName}-${EnvName}-SubDomain"
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
                - IsDefaultRootPath
                -
                  - "/*"
                -
                  - !Sub "/${RulePath}"
                  - !Sub "/${RulePath}/*"
      ListenerArn: EnvControllerAction.HTTPSListenerArn
      Priority: HTTPSRulePriorityAction.Priority

  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Metadata:
      'aws:copilot:description': 'A HTTP listener rule for forwarding HTTP traffic'
    Condition: HTTPLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: TargetGroup
          Type: forward
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
                - IsDefaultRootPath
                -
                  - "/*"
                -
                  - !Sub "/${RulePath}"
                  - !Sub "/${RulePath}/*"
      ListenerArn: EnvControllerAction.HTTPListenerArn
      Priority:
        !If
          - IsDefaultRootPath
          - 50000
          - HTTPRulePriorityAction.Priority

  HTTPSWaitHandle:
    Condition: HTTPSLoadBalancer
    DependsOn: HTTPSListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  HTTPWaitHandle:
    Condition: HTTPLoadBalancer
    DependsOn: HTTPListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitUntilListenerRuleIsCreated:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [HTTPLoadBalancer, HTTPWaitHandle, HTTPSWaitHandle]
      Timeout: "1"
      Count: 0

  AddonsStack:
    Metadata:
      'aws:copilot:description': 'An Addons CloudFormation Stack for your additional AWS resources'
    Type: AWS::CloudFormation::Stack
    DependsOn: EnvControllerAction
    Condition: HasAddons
    Properties:
      Parameters:
        App: AppName
        Env: EnvName
        Name: WorkloadName
      TemplateURL:
        AddonsTemplateURL

Outputs:
  DiscoveryServiceARN:
    Description: ARN of the Discovery Service.
    Value: DiscoveryService.Arn
    Export:
      Name: ${AWS::StackName}-DiscoveryServiceARN
