# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a backend service on Amazon ECS.
Metadata:
  Version: v1.29.0
Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  AddonsTemplateURL:
    Description: "URL of the addons nested stack template within the S3 bucket."
    Type: String
    Default: ""
  EnvFileARN:
    Description: "URL of the environment file."
    Type: String
    Default: ""
  ArtifactKeyARN:
    Type: String
    Description: 'KMS Key used for encrypting artifacts'
  LogRetention:
    Type: Number
    Default: 30
  TargetContainer:
    Type: String
  TargetPort:
    Type: Number
  HTTPSEnabled:
    Type: String
    AllowedValues: [true, false]
  RulePath:
    Type: String
Conditions:
  IsGovCloud: !Equals [!Ref "AWS::Partition", "aws-us-gov"]
  HasAddons: !Not [!Equals [!Ref AddonsTemplateURL, ""]]
  HasEnvFile: !Not [!Equals [!Ref EnvFileARN, ""]]
  ExposePort: !Not [!Equals [!Ref TargetPort, -1]]
Resources:
  LogGroup:
    Metadata:
      "aws:copilot:description": "A CloudWatch log group to hold your service logs"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join [
          "",
          [/copilot/, !Ref AppName, "-", !Ref EnvName, "-", !Ref WorkloadName],
        ]
      RetentionInDays: !Ref LogRetention
  TaskDefinition:
    Metadata:
      "aws:copilot:description": "An ECS task definition to group your containers and run them on ECS"
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family:
        !Join ["", [!Ref AppName, "-", !Ref EnvName, "-", !Ref WorkloadName]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref WorkloadName
          Image: !Ref ContainerImage
          Environment:
            - Name: COPILOT_APPLICATION_NAME
              Value: !Sub "${AppName}"
            - Name: COPILOT_SERVICE_DISCOVERY_ENDPOINT
              Value: my-env.my-app.local
            - Name: COPILOT_ENVIRONMENT_NAME
              Value: !Sub "${EnvName}"
            - Name: COPILOT_SERVICE_NAME
              Value: !Sub "${WorkloadName}"
            - Name: COPILOT_LB_DNS
              Value: !GetAtt EnvControllerAction.InternalLoadBalancerDNSName
          EnvironmentFiles:
            - !If
              - HasEnvFile
              - Type: s3
                Value: !Ref EnvFileARN
              - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: copilot
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: target
  ExecutionRole:
    Metadata:
      "aws:copilot:description": "An IAM Role for the Fargate agent to make AWS API calls on your behalf"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName:
            !Join [
              "",
              [
                !Ref AppName,
                "-",
                !Ref EnvName,
                "-",
                !Ref WorkloadName,
                SecretsPolicy,
              ],
            ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                Condition:
                  StringEquals:
                    "ssm:ResourceTag/copilot-application": !Sub "${AppName}"
                    "ssm:ResourceTag/copilot-environment": !Sub "${EnvName}"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
                Condition:
                  StringEquals:
                    "secretsmanager:ResourceTag/copilot-application": !Sub "${AppName}"
                    "secretsmanager:ResourceTag/copilot-environment": !Sub "${EnvName}"
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                Resource:
                  - !Ref ArtifactKeyARN
        - !If
          # Optional IAM permission required by ECS task def env file
          # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html#taskdef-envfiles-iam
          # Example EnvFileARN: arn:aws:s3:::stackset-demo-infrastruc-pipelinebuiltartifactbuc-11dj7ctf52wyf/manual/1638391936/env
          - HasEnvFile
          - PolicyName:
              !Join [
                "",
                [
                  !Ref AppName,
                  "-",
                  !Ref EnvName,
                  "-",
                  !Ref WorkloadName,
                  GetEnvFilePolicy,
                ],
              ]
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource:
                    - !Ref EnvFileARN
                - Effect: "Allow"
                  Action:
                    - "s3:GetBucketLocation"
                  Resource:
                    - !Join
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":s3:::"
                        - !Select [
                            0,
                            !Split [
                              "/",
                              !Select [5, !Split [":", !Ref EnvFileARN]],
                            ],
                          ]
          - !Ref AWS::NoValue
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  TaskRole:
    Metadata:
      "aws:copilot:description": "An IAM role to control permissions for the containers in your tasks"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "DenyIAM"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Deny"
                Action: "iam:*"
                Resource: "*"
        - PolicyName: "ExecuteCommand"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "ssmmessages:CreateControlChannel",
                    "ssmmessages:OpenControlChannel",
                    "ssmmessages:CreateDataChannel",
                    "ssmmessages:OpenDataChannel",
                  ]
                Resource: "*"
              - Effect: "Allow"
                Action:
                  [
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                  ]
                Resource: "*"
  DiscoveryService:
    Metadata:
      "aws:copilot:description": "Service discovery for your services to communicate within the VPC"
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Copilot services
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
          - TTL: 10
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref WorkloadName
      NamespaceId:
        Fn::ImportValue: !Sub "${AppName}-${EnvName}-ServiceDiscoveryNamespaceID"
  DynamicDesiredCountAction:
    Metadata:
      "aws:copilot:description": "A custom resource returning the ECS service's running task count"
    Type: Custom::DynamicDesiredCountFunction
    Properties:
      ServiceToken: !GetAtt DynamicDesiredCountFunction.Arn
      Cluster:
        Fn::ImportValue: !Sub "${AppName}-${EnvName}-ClusterId"
      App: !Ref AppName
      Env: !Ref EnvName
      Svc: !Ref WorkloadName
      DefaultDesiredCount: !Ref TaskCount
      # We need to force trigger this lambda function on all deployments, so we give it a random ID as input on all event types.
      UpdateID: AVeryRandomUUID
  DynamicDesiredCountFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Timeout: 600
      MemorySize: 512
      Role: !GetAtt "DynamicDesiredCountFunctionRole.Arn"
      Runtime: nodejs16.x
  DynamicDesiredCountFunctionRole:
    Metadata:
      "aws:copilot:description": "An IAM Role for describing number of running tasks in your ECS service"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "DelegateDesiredCountAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECS
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                Resource: "*"
                Condition:
                  ArnEquals:
                    "ecs:cluster":
                      Fn::Sub:
                        - arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                        - ClusterName:
                            Fn::ImportValue: !Sub "${AppName}-${EnvName}-ClusterId"
              - Sid: ResourceGroups
                Effect: Allow
                Action:
                  - resource-groups:GetResources
                Resource: "*"
              - Sid: Tags
                Effect: Allow
                Action:
                  - "tag:GetResources"
                Resource: "*"
  AutoScalingRole:
    Metadata:
      "aws:copilot:description": "An IAM role for container auto scaling"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
  AutoScalingTarget:
    Metadata:
      "aws:copilot:description": "An autoscaling target to scale your service's desired count"
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId:
        Fn::Join:
          - "/"
          - - "service"
            - Fn::ImportValue: !Sub "${AppName}-${EnvName}-ClusterId"
            - !GetAtt Service.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicyALBSumRequestCountPerTarget:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        !Join [
          "-",
          [!Ref WorkloadName, ALBSumRequestCountPerTarget, ScalingPolicy],
        ]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: LoadBalancer
              Value: !GetAtt EnvControllerAction.InternalLoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt TargetGroup.TargetGroupFullName
          MetricName: RequestCountPerTarget
          Namespace: AWS/ApplicationELB
          Statistic: Sum
        ScaleInCooldown: 120
        ScaleOutCooldown: 60
        TargetValue: 256
  Service:
    Metadata:
      "aws:copilot:description": "An ECS service to run and maintain your tasks in the environment cluster"
    Type: AWS::ECS::Service
    DependsOn:
      - EnvControllerAction
      - HTTPListenerRule
    Properties:
      PlatformVersion: LATEST
      Cluster:
        Fn::ImportValue: !Sub "${AppName}-${EnvName}-ClusterId"
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DynamicDesiredCountAction.DesiredCount
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        Alarms:
          !If
          - IsGovCloud
          - !Ref AWS::NoValue
          - Enable: false
            AlarmNames: []
            Rollback: true
      PropagateTags: SERVICE
      EnableExecuteCommand: true
      LaunchType: FARGATE
      ServiceConnectConfiguration: !If
        - IsGovCloud
        - !Ref AWS::NoValue
        - Enabled: False
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue: !Sub "${AppName}-${EnvName}-PublicSubnets"
          SecurityGroups:
            - Fn::ImportValue: !Sub "${AppName}-${EnvName}-EnvironmentSecurityGroup"
      ServiceRegistries:
        !If [
          ExposePort,
          [
            {
              RegistryArn: !GetAtt DiscoveryService.Arn,
              Port: !Ref TargetPort,
            },
          ],
          !Ref "AWS::NoValue",
        ]
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: http-autoscaling
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Metadata:
      "aws:copilot:description": "A target group to connect the load balancer to your service on port 8080"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: / # Default is '/'.
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # ECS Default is 300; Copilot default is 60.
        - Key: stickiness.enabled
          Value: false
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${AppName}-${EnvName}-VpcId"
  RulePriorityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.nextAvailableRulePriorityHandler"
      Timeout: 600
      MemorySize: 512
      Role: !GetAtt "RulePriorityFunctionRole.Arn"
      Runtime: nodejs16.x
  RulePriorityFunctionRole:
    Metadata:
      "aws:copilot:description": "An IAM Role to describe load balancer rules for assigning a priority"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "RulePriorityGeneratorAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeRules
                Resource: "*"
  LoadBalancerInternalDNSAlias:
    Metadata:
      "aws:copilot:description": "Alias for http-autoscaling.my-env.my-app.internal to the internal load balancer"
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub "Load balancer alias for service ${WorkloadName}"
      HostedZoneId: !GetAtt EnvControllerAction.InternalWorkloadsHostedZone
      RecordSets:
        - Type: A
          AliasTarget:
            HostedZoneId: !GetAtt EnvControllerAction.InternalLoadBalancerHostedZone
            DNSName: !GetAtt EnvControllerAction.InternalLoadBalancerDNSName
          Name: !Join
            - "."
            - - !Ref WorkloadName
              - !GetAtt EnvControllerAction.InternalWorkloadsHostedZoneName
  HTTPRulePriorityAction:
    Metadata:
      "aws:copilot:description": "A custom resource assigning priority for HTTP listener rules"
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: !GetAtt RulePriorityFunction.Arn
      RulePath: ["/http-autoscaling-path"]
      ListenerArn: !GetAtt EnvControllerAction.InternalHTTPListenerArn
  HTTPListenerRule:
    Metadata:
      "aws:copilot:description": "An HTTP listener rule for path `/http-autoscaling-path` that forwards HTTP traffic to your tasks"
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: "host-header"
          HostHeaderConfig:
            Values:
              - !GetAtt EnvControllerAction.InternalLoadBalancerDNSName
              - !Join
                - "."
                - - !Ref WorkloadName
                  - !GetAtt EnvControllerAction.InternalWorkloadsHostedZoneName
        - Field: "path-pattern"
          PathPatternConfig:
            Values:
              - "/http-autoscaling-path"
              - "/http-autoscaling-path/*"
      ListenerArn: !GetAtt EnvControllerAction.InternalHTTPListenerArn
      Priority: !GetAtt HTTPRulePriorityAction.Priority
  AddonsStack:
    Metadata:
      "aws:copilot:description": "An Addons CloudFormation Stack for your additional AWS resources"
    Type: AWS::CloudFormation::Stack # Needed for #1848
    DependsOn: EnvControllerAction
    Condition: HasAddons
    Properties:
      Parameters:
        App: !Ref AppName
        Env: !Ref EnvName
        Name: !Ref WorkloadName
      TemplateURL: !Ref AddonsTemplateURL
  EnvControllerAction:
    Metadata:
      "aws:copilot:description": "Update your environment's shared resources"
    Type: Custom::EnvControllerFunction
    Properties:
      ServiceToken: !GetAtt EnvControllerFunction.Arn
      Workload: !Ref WorkloadName
      EnvStack: !Sub "${AppName}-${EnvName}"
      Parameters: ["InternalALBWorkloads"]
      EnvVersion: v1.42.0
  EnvControllerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Timeout: 900
      MemorySize: 512
      Role: !GetAtt "EnvControllerRole.Arn"
      Runtime: nodejs16.x
  EnvControllerRole:
    Metadata:
      "aws:copilot:description": "An IAM role to update your environment stack"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "EnvControllerStackUpdate"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                Resource: !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}-${EnvName}/*"
                Condition:
                  StringEquals:
                    "cloudformation:ResourceTag/copilot-application": !Sub "${AppName}"
                    "cloudformation:ResourceTag/copilot-environment": !Sub "${EnvName}"
        - PolicyName: "EnvControllerRolePass"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AppName}-${EnvName}-CFNExecutionRole"
                Condition:
                  StringEquals:
                    "iam:ResourceTag/copilot-application": !Sub "${AppName}"
                    "iam:ResourceTag/copilot-environment": !Sub "${EnvName}"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
Outputs:
  DiscoveryServiceARN:
    Description: ARN of the Discovery Service.
    Value: !GetAtt DiscoveryService.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DiscoveryServiceARN
