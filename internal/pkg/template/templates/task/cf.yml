# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template that represents a task on Amazon ECS."
Parameters:
  TaskName:
    Type: String
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  LogRetention:
    Type: Number
  ContainerImage:
    Type: String
  TaskRole:
    Type: String
  ExecutionRole:
    Type: String
  Command:
    Type: CommaDelimitedList
  EntryPoint:
    Type: CommaDelimitedList
  OS:
    Type: String
  Arch:
    Type: String
  App:
    Type: String
  Env:
    Type: String
Conditions:
  # NOTE: Image cannot be pushed until the ECR repo is created, at which time ContainerImage would be "".
  HasImage:
    !Not [!Equals [!Ref ContainerImage, ""]]
  HasTaskRole:
    !Not [!Equals [!Ref TaskRole, ""]]
  HasExecutionRole:
    !Not [!Equals [!Ref ExecutionRole, ""]]
  HasCommand:
    !Not [!Equals [ !Join ["", !Ref Command], ""]]
  HasEntryPoint:
    !Not [ !Equals [ !Join [ "", !Ref EntryPoint ], "" ] ]
  HasCustomPlatform:
    !Not [!Equals [!Ref OS, ""]]
  HasApp:
    !Not [!Equals [!Ref App, ""]]
  HasEnv:
    !Not [!Equals [!Ref Env, ""]]
  HasAppAndEnv: !And
    - !Condition HasApp
    - !Condition HasEnv
Resources:
  TaskDefinition:
    Metadata:
      'aws:copilot:description': 'An ECS task definition to run your container on ECS'
    Condition: HasImage # NOTE: We only create TaskDefinition if an image is provided
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECRRepo
    Properties:
      ContainerDefinitions:
        -
          Image: !Ref ContainerImage
          EntryPoint: !If [HasEntryPoint, !Ref EntryPoint, !Ref "AWS::NoValue"]
          Command: !If [HasCommand, !Ref Command, !Ref "AWS::NoValue"]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: copilot-task
          Name: !Ref TaskName{{if .EnvVars}}
          Environment:{{range $name, $value := .EnvVars}}
          - Name: {{$name}}
            Value: {{$value}}{{end}}{{end}}
          {{- if .Secrets}}
          Secrets:{{range $name, $valueFrom := .Secrets}}
          - Name: {{$name}}
            ValueFrom: {{$valueFrom}}{{end}}
          {{- end}}
      Family: !Join ['-', ["copilot", !Ref TaskName]]
      RuntimePlatform: !If [HasCustomPlatform, {OperatingSystemFamily: !Ref OS, CpuArchitecture: !Ref Arch}, !Ref "AWS::NoValue"]
      RequiresCompatibilities:
        - "FARGATE"
      NetworkMode: awsvpc
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !If [HasExecutionRole, !Ref ExecutionRole, !GetAtt DefaultExecutionRole.Arn]
      TaskRoleArn: !If [HasTaskRole, !Ref TaskRole, !GetAtt DefaultTaskRole.Arn]
  DefaultExecutionRole:
    Metadata:
      'aws:copilot:description': 'An IAM Role for the Fargate agent to make AWS API calls on your behalf'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      {{- if .Secrets}}
      Policies:
        - PolicyName: 'PullSecrets'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                - ssm:GetParameters  
                Condition:
                  StringEquals:
                    "ssm:ResourceTag/copilot-application": !If [ HasAppAndEnv, !Ref App, !Ref "AWS::NoValue" ]
                    "ssm:ResourceTag/copilot-environment": !If [ HasAppAndEnv, !Ref Env, !Ref "AWS::NoValue" ]
                    "ssm:ResourceTag/copilot-task": !If [ HasAppAndEnv, !Ref "AWS::NoValue", !Ref TaskName ]
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
      {{- end}}
  DefaultTaskRole:
    Metadata:
      'aws:copilot:description': 'An IAM Role for the task to make AWS API calls on your behalf. Policies are required by ECS Exec'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ExecuteCommand'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: [
                  "ssmmessages:CreateControlChannel",
                  "ssmmessages:OpenControlChannel",
                  "ssmmessages:CreateDataChannel",
                  "ssmmessages:OpenDataChannel"
                ]
                Resource: "*"
              - Effect: 'Allow'
                Action: [
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ]
                Resource: "*"
  ECRRepo:
    Metadata:
      'aws:copilot:description': 'An ECR repository to store your container images'
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ["-", ["copilot", !Ref TaskName]]
      RepositoryPolicyText:
        Version: '2008-10-17'
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
      LifecyclePolicy: # TODO: inject the JSON string instead of hard-coding it here
        LifecyclePolicyText: "{\"rules\":[{\"rulePriority\":1,\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\":\"days\",\"countNumber\":5},\"action\":{\"type\":\"expire\"}}]}"
  LogGroup:
    Metadata:
      'aws:copilot:description': 'A CloudWatch log group to hold your task logs'
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ["/copilot/", !Ref TaskName]]
      RetentionInDays: !Ref LogRetention
Outputs:
  ECRRepo:
    Description: ECR Repo used to store images of task.
    Value: !GetAtt ECRRepo.Arn