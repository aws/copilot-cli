"use strict";const aws=require("aws-sdk");let defaultResponseURL,report=function(a,b,c,d,e,f){return new Promise((g,h)=>{const i=require("https"),{URL:j}=require("url");var k=JSON.stringify({Status:c,Reason:f,PhysicalResourceId:d||b.logStreamName,StackId:a.StackId,RequestId:a.RequestId,LogicalResourceId:a.LogicalResourceId,Data:e});const l=new j(a.ResponseURL||defaultResponseURL),m={hostname:l.hostname,port:443,path:l.pathname+l.search,method:"PUT",headers:{"Content-Type":"","Content-Length":k.length}};i.request(m).on("error",h).on("response",a=>{a.resume(),400<=a.statusCode?h(new Error(`Error ${a.statusCode}: ${a.statusMessage}`)):g()}).end(k,"utf8")})};const getRunningTaskCount=async function(a,b,c,d,e){var f=new aws.ResourceGroupsTaggingAPI;const g=await f.getResources({ResourceTypeFilters:["ecs:service"],TagFilters:[{Key:"copilot-application",Values:[c]},{Key:"copilot-environment",Values:[d]},{Key:"copilot-service",Values:[e]}]}).promise(),h=g.ResourceTagMappingList;if(1!==h.length)return a;const i=h[0].ResourceARN;var j=new aws.ECS;const k=await j.describeServices({cluster:b,services:[i]}).promise();return 1===k.services.length?k.services[0].desiredCount:a};exports.handler=async function(a,b){var c={};const d=a.ResourceProperties,e=a.PhysicalResourceId||`copilot/apps/${d.App}/envs/${d.Env}/services/${d.Svc}/autoscaling`;try{switch(a.RequestType){case"Create":c.DesiredCount=await getRunningTaskCount(d.DefaultDesiredCount,d.Cluster,d.App,d.Env,d.Svc);break;case"Update":c.DesiredCount=await getRunningTaskCount(d.DefaultDesiredCount,d.Cluster,d.App,d.Env,d.Svc);break;case"Delete":break;default:throw new Error(`Unsupported request type ${a.RequestType}`);}await report(a,b,"SUCCESS",e,c)}catch(f){c.DesiredCount=d.DefaultDesiredCount,console.log(`Caught error ${f}. Set back desired count to ${c.DesiredCount}`),await report(a,b,"SUCCESS",e,c)}},exports.withDefaultResponseURL=function(a){defaultResponseURL=a};