"use strict";const aws=require("aws-sdk");let defaultResponseURL,defaultLogGroup,defaultLogStream,waiter,hostedZoneCache=new Map,report=function(a,b,c,d,e,f){return new Promise((g,h)=>{const i=require("https"),{URL:j}=require("url");var k=JSON.stringify({Status:c,Reason:f,PhysicalResourceId:d||b.logStreamName,StackId:a.StackId,RequestId:a.RequestId,LogicalResourceId:a.LogicalResourceId,Data:e});const l=new j(a.ResponseURL||defaultResponseURL),m={hostname:l.hostname,port:443,path:l.pathname+l.search,method:"PUT",headers:{"Content-Type":"","Content-Length":k.length}};i.request(m).on("error",h).on("response",a=>{a.resume(),400<=a.statusCode?h(new Error(`Error ${a.statusCode}: ${a.statusMessage}`)):g()}).end(k,"utf8")})};const writeCustomDomainRecord=async function(a,b,c,d,e,f,g){for(const h of c){const c=await getAliasType(f,h);switch(c){case f.EnvDomainZone:await writeARecord(b,h,d,e,c.domain,g);break;case f.AppDomainZone:await writeARecord(a,h,d,e,c.domain,g);break;case f.RootDomainZone:await writeARecord(a,h,d,e,c.domain,g);break;default:}}},writeARecord=async function(a,b,c,d,e,f){let g=hostedZoneCache.get(e);if(!g){const b=await a.listHostedZonesByName({DNSName:e,MaxItems:"1"}).promise();if(!b.HostedZones||0==b.HostedZones.length)throw new Error(`Couldn't find any Hosted Zone with DNS name ${e}.`);g=b.HostedZones[0].Id.split("/").pop(),hostedZoneCache.set(e,g)}console.log(`${f} A record into Hosted Zone ${g}`);const h=await updateRecords(a,g,f,b,c,d);await waitForRecordChange(a,h.ChangeInfo.Id)};exports.handler=async function(a,b){const c=a.LogicalResourceId,d=a.ResourceProperties,[e,f,g]=[d.AppName,d.EnvName,d.DomainName];var h={EnvDomainZone:{regex:new RegExp(`^([^\.]+\.)?${f}.${e}.${g}`),domain:`${f}.${e}.${g}`},AppDomainZone:{regex:new RegExp(`^([^\.]+\.)?${e}.${g}`),domain:`${e}.${g}`},RootDomainZone:{regex:new RegExp(`^([^\.]+\.)?${g}`),domain:`${g}`},OtherDomainZone:{regex:/.*/}};const i=new aws.Route53,j=new aws.Route53({credentials:new aws.ChainableTemporaryCredentials({params:{RoleArn:d.AppDNSRole},masterCredentials:new aws.EnvironmentCredentials("AWS")})});waiter&&(i.waitFor=j.waitFor=waiter);try{var k=await getAllAliases(d.Aliases);switch(a.RequestType){case"Create":await writeCustomDomainRecord(j,i,k,d.LoadBalancerDNS,d.LoadBalancerHostedZone,h,"UPSERT");break;case"Update":await writeCustomDomainRecord(j,i,k,d.LoadBalancerDNS,d.LoadBalancerHostedZone,h,"UPSERT");var l=await getAllAliases(a.OldResourceProperties.Aliases),m=[...l].filter(function(a){return!k.has(a)});await writeCustomDomainRecord(j,i,m,d.LoadBalancerDNS,d.LoadBalancerHostedZone,h,"DELETE");break;case"Delete":await writeCustomDomainRecord(j,i,k,d.LoadBalancerDNS,d.LoadBalancerHostedZone,h,"DELETE");break;default:throw new Error(`Unsupported request type ${a.RequestType}`);}await report(a,b,"SUCCESS",c,{})}catch(d){console.log(`Caught error ${d}.`),await report(a,b,"FAILED",c,null,`${d.message} (Log: ${defaultLogGroup||b.logGroupName}/${defaultLogStream||b.logStreamName})`)}};const getAllAliases=function(a){let b;try{b=JSON.parse(a||"{}")}catch(b){throw new Error(`Cannot parse ${a} into JSON format.`)}var c=[];for(var d in b)c.push(...b[d]);return new Set(c)},getAliasType=function(a,b){switch(!0){case a.EnvDomainZone.regex.test(b):return a.EnvDomainZone;case a.AppDomainZone.regex.test(b):return a.AppDomainZone;case a.RootDomainZone.regex.test(b):return a.RootDomainZone;default:return a.OtherDomainZone;}},waitForRecordChange=function(a,b){return a.waitFor("resourceRecordSetsChanged",{$waiter:{delay:30,maxAttempts:10},Id:b}).promise()},updateRecords=function(a,b,c,d,e,f){return a.changeResourceRecordSets({ChangeBatch:{Changes:[{Action:c,ResourceRecordSet:{Name:d,Type:"A",AliasTarget:{HostedZoneId:f,DNSName:e,EvaluateTargetHealth:!0}}}]},HostedZoneId:b}).promise()};exports.withDefaultResponseURL=function(a){defaultResponseURL=a},exports.withWaiter=function(a){waiter=a},exports.reset=function(){waiter=void 0},exports.withDefaultLogStream=function(a){defaultLogStream=a},exports.withDefaultLogGroup=function(a){defaultLogGroup=a};