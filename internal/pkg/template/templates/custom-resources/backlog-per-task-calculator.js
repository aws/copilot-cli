"use strict";const aws=require("aws-sdk");let ecs,sqs;exports.handler=async()=>{setupClients();try{const a=await getRunningTaskCount(process.env.CLUSTER_NAME,process.env.SERVICE_NAME),b=await Promise.all(convertQueueNames(process.env.QUEUE_NAMES).map(async b=>{const c=await getQueueURL(b);return{queueName:b,backlogPerTask:await getBacklogPerTask(c,a)}})),c=Date.now();for(const{queueName:a,backlogPerTask:d}of b)emitBacklogPerTaskMetric(process.env.NAMESPACE,c,a,d)}catch(a){console.error(`Unexpected error ${a}`)}};const getBacklogPerTask=async(a,b)=>{const c=0===b?1:b,d=await getQueueDepth(a);return Math.ceil(d/c)},emitBacklogPerTaskMetric=(a,b,c,d)=>{console.log(JSON.stringify({_aws:{Timestamp:b,CloudWatchMetrics:[{Namespace:a,Dimensions:[["QueueName"]],Metrics:[{Name:"BacklogPerTask",Unit:"Count"}]}]},QueueName:c,BacklogPerTask:d}))},getQueueURL=async a=>{const b=await sqs.getQueueUrl({QueueName:a}).promise();return b.QueueUrl},getQueueDepth=async a=>{const b=await sqs.getQueueAttributes({QueueUrl:a,AttributeNames:["ApproximateNumberOfMessages"]}).promise();return b.Attributes.ApproximateNumberOfMessages},getRunningTaskCount=async(a,b)=>{const c=await ecs.describeServices({cluster:a,services:[b]}).promise();if(0===c.services.length)throw new Error(`service ${b} of cluster ${a} does not exist`);return c.services[0].runningCount},setupClients=()=>{ecs=new aws.ECS,sqs=new aws.SQS},convertQueueNames=a=>a.split(",");