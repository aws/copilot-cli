DynamicDesiredCountAction:
  Type: Custom::DynamicDesiredCountFunction
  Properties:
    ServiceToken: !GetAtt DynamicDesiredCountFunction.Arn
    Cluster:
      Fn::ImportValue:
        !Sub '${AppName}-${EnvName}-ClusterId'
    App: !Ref AppName
    Env: !Ref EnvName
    Svc: !Ref WorkloadName
    DefaultDesiredCount: !Ref TaskCount
    # We need to force trigger this lambda function on all deployments, so we give it a random ID as input on all event types.
    UpdateID: {{ randomUUID }}

DynamicDesiredCountFunction:
  Type: AWS::Lambda::Function
  Properties:
    Code:
      ZipFile: |
        {{.DesiredCountLambda}}
    Handler: "index.handler"
    Timeout: 600
    MemorySize: 512
    Role: !GetAtt 'CustomResourceRole.Arn'
    Runtime: nodejs12.x

AutoScalingRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: 'sts:AssumeRole'
    ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

AutoScalingTarget:
  Metadata:
    'aws:copilot:description': "An AutoScaling target to scale your service's desired count"
  Type: AWS::ApplicationAutoScaling::ScalableTarget
  Properties:
    MinCapacity: {{.Autoscaling.MinCapacity}}
    MaxCapacity: {{.Autoscaling.MaxCapacity}}
    ResourceId:
      Fn::Join:
        - '/'
        - - 'service'
          - Fn::ImportValue:
              !Sub '${AppName}-${EnvName}-ClusterId'
          - !GetAtt Service.Name
    ScalableDimension: ecs:service:DesiredCount
    ServiceNamespace: ecs
    RoleARN: !GetAtt AutoScalingRole.Arn
{{if .Autoscaling.CPU}}
AutoScalingPolicyECSServiceAverageCPUUtilization:
  Type: AWS::ApplicationAutoScaling::ScalingPolicy
  Properties:
    PolicyName: !Join ['-', [!Ref WorkloadName, ECSServiceAverageCPUUtilization, ScalingPolicy]]
    PolicyType: TargetTrackingScaling
    ScalingTargetId: !Ref AutoScalingTarget
    TargetTrackingScalingPolicyConfiguration:
      PredefinedMetricSpecification:
        PredefinedMetricType: ECSServiceAverageCPUUtilization
      ScaleInCooldown: 120
      ScaleOutCooldown: 60
      TargetValue: {{.Autoscaling.CPU}}
{{- end}}
{{if .Autoscaling.Memory}}
AutoScalingPolicyECSServiceAverageMemoryUtilization:
  Type: AWS::ApplicationAutoScaling::ScalingPolicy
  Properties:
    PolicyName: !Join ['-', [!Ref WorkloadName, ECSServiceAverageMemoryUtilization, ScalingPolicy]]
    PolicyType: TargetTrackingScaling
    ScalingTargetId: !Ref AutoScalingTarget
    TargetTrackingScalingPolicyConfiguration:
      PredefinedMetricSpecification:
        PredefinedMetricType: ECSServiceAverageMemoryUtilization
      ScaleInCooldown: 120
      ScaleOutCooldown: 60
      TargetValue: {{.Autoscaling.Memory}}
{{- end}}