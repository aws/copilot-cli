{{- range $listener := .ALB.Listener}}
{{- if eq $listener.Path "/"}}
TargetGroupForDefaultPath:
{{- else }}
TargetGroupFor{{logicalIDSafe $listener.Path}}:
{{- end }}
  Metadata:
    'aws:copilot:description': "A target group to connect the load balancer to your service"
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    HealthCheckPath: {{$listener.HTTPHealthCheck.HealthCheckPath}} # Default is '/'.
    {{- if $listener.HTTPHealthCheck.Port}}
    HealthCheckPort: {{$listener.HTTPHealthCheck.Port}} # Default is 'traffic-port'.
    {{- end}}
    {{- if $listener.HTTPHealthCheck.SuccessCodes}}
    Matcher:
      HttpCode: {{$listener.HTTPHealthCheck.SuccessCodes}}
    {{- end}}
    {{- if $listener.HTTPHealthCheck.HealthyThreshold}}
    HealthyThresholdCount: {{$listener.HTTPHealthCheck.HealthyThreshold}}
    {{- end}}
    {{- if $listener.HTTPHealthCheck.UnhealthyThreshold}}
    UnhealthyThresholdCount: {{$listener.HTTPHealthCheck.UnhealthyThreshold}}
    {{- end}}
    {{- if $listener.HTTPHealthCheck.Interval}}
    HealthCheckIntervalSeconds: {{$listener.HTTPHealthCheck.Interval}}
    {{- end}}
    {{- if $listener.HTTPHealthCheck.Timeout}}
    HealthCheckTimeoutSeconds: {{$listener.HTTPHealthCheck.Timeout}}
    {{- end}}
    {{- if .HealthCheckProtocol}}
    HealthCheckProtocol: {{.HealthCheckProtocol}}
    {{- end}}
    Port: {{$listener.TargetPort}}
    {{- if $listener.IsHTTPS }}
    Protocol: HTTPS
    {{- else }}
    Protocol: HTTP
    {{- end }}
    {{- if $.HTTPVersion}}
    ProtocolVersion: {{$.HTTPVersion}}
    {{- end}}
    TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: {{$.DeregistrationDelay}} # ECS Default is 300; Copilot default is 60.
      - Key: stickiness.enabled
        Value: {{$listener.Stickiness}}
    TargetType: ip
    VpcId:
      Fn::ImportValue:
        !Sub "${AppName}-${EnvName}-VpcId"
    {{- end}}
RulePriorityFunction:
  Type: AWS::Lambda::Function
  Properties:
    {{- with $cr := index .CustomResources "RulePriorityFunction" }}
    Code:
      S3Bucket: {{$cr.Bucket}}
      S3Key: {{$cr.Key}}
    {{- end }}
    Handler: "index.nextAvailableRulePriorityHandler"
    Timeout: 600
    MemorySize: 512
    Role: !GetAtt "RulePriorityFunctionRole.Arn"
    Runtime: nodejs16.x

RulePriorityFunctionRole:
  Metadata:
    'aws:copilot:description': "An IAM Role {{- if .PermissionsBoundary}} with permissions boundary {{.PermissionsBoundary}} {{- end}} to describe load balancer rules for assigning a priority"
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
    {{- if .PermissionsBoundary}}
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}'
    {{- end}}
    Path: /
    ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Policies:
      - PolicyName: "RulePriorityGeneratorAccess"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - elasticloadbalancing:DescribeRules
              Resource: "*"

{{- if .ALB.HTTPSListener}}
{{include "https-listener" .}}
{{- else}}
{{include "http-listener" .}}
{{- end}}