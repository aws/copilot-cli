TargetGroup:
  Metadata:
    'aws:copilot:description': "A target group to connect the load balancer to your service"
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    HealthCheckPath: {{.HTTPHealthCheck.HealthCheckPath}} # Default is '/'.
    {{- if .HTTPHealthCheck.Port}}
    HealthCheckPort: {{.HTTPHealthCheck.Port}} # Default is 'traffic-port'.
    {{- end}}
    {{- if .HTTPHealthCheck.SuccessCodes}}
    Matcher:
      HttpCode: {{.HTTPHealthCheck.SuccessCodes}}
    {{- end}}
    {{- if .HTTPHealthCheck.HealthyThreshold}}
    HealthyThresholdCount: {{.HTTPHealthCheck.HealthyThreshold}}
    {{- end}}
    {{- if .HTTPHealthCheck.UnhealthyThreshold}}
    UnhealthyThresholdCount: {{.HTTPHealthCheck.UnhealthyThreshold}}
    {{- end}}
    {{- if .HTTPHealthCheck.Interval}}
    HealthCheckIntervalSeconds: {{.HTTPHealthCheck.Interval}}
    {{- end}}
    {{- if .HTTPHealthCheck.Timeout}}
    HealthCheckTimeoutSeconds: {{.HTTPHealthCheck.Timeout}}
    {{- end}}
    Port: !Ref ContainerPort
    Protocol: HTTP
    {{- if .HTTPVersion}}
    ProtocolVersion: {{.HTTPVersion}}
    {{- end}}
    TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: {{.DeregistrationDelay}} # ECS Default is 300; Copilot default is 60.
      - Key: stickiness.enabled
        Value: !Ref Stickiness
    TargetType: ip
    VpcId:
      Fn::ImportValue:
        !Sub "${AppName}-${EnvName}-VpcId"

RulePriorityFunction:
  Type: AWS::Lambda::Function
  Properties:
    {{- with $cr := index .CustomResources "RulePriorityFunction" }}
    Code:
      S3Bucket: {{$cr.Bucket}}
      S3Key: {{$cr.Key}}
    {{- end }}
    Handler: "index.nextAvailableRulePriorityHandler"
    Timeout: 600
    MemorySize: 512
    Role: !GetAtt "RulePriorityFunctionRole.Arn"
    Runtime: nodejs16.x

RulePriorityFunctionRole:
  Metadata:
    'aws:copilot:description': "An IAM Role to describe load balancer rules for assigning a priority"
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
    Path: /
    ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Policies:
      - PolicyName: "RulePriorityGeneratorAccess"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - elasticloadbalancing:DescribeRules
              Resource: "*"

{{- if .HTTPSListener}}
{{include "https-listener" .}}
{{- else}}
{{include "http-listener" .}}
{{- end}}
