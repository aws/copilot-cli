{{- if not .Aliases}}
LoadBalancerDNSAlias:
  Metadata:
    'aws:copilot:description': 'The default alias record for the application load balancer'
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneId:
      Fn::ImportValue:
        !Sub "${AppName}-${EnvName}-HostedZone"
    Comment: !Sub "LoadBalancer alias for service ${WorkloadName}"
    RecordSets:
    - Name:
        !Join
          - '.'
          - - !Ref WorkloadName
            - Fn::ImportValue:
                !Sub "${AppName}-${EnvName}-SubDomain"
            - ""
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt EnvControllerAction.PublicLoadBalancerHostedZone
        DNSName: !GetAtt EnvControllerAction.PublicLoadBalancerDNSName
{{- else if and .Aliases .HostedZoneID (eq .ServiceType "Backend Service")}}
LoadBalancerDNSAlias:
  Metadata:
    'aws:copilot:description': 'Alias records for the application load balancer'
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneId: {{.HostedZoneID}}
    Comment: !Sub "LoadBalancer alias for service ${WorkloadName}"
    RecordSets:
    {{- range $alias := .Aliases}}
      - Name: {{$alias}}
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt EnvControllerAction.InternalLoadBalancerHostedZone
          DNSName: !GetAtt EnvControllerAction.InternalLoadBalancerDNSName
    {{- end}}
{{- end}}

HTTPSRulePriorityAction:
  Metadata:
    'aws:copilot:description': 'A custom resource assigning priority for HTTPS listener rules'
  Type: Custom::RulePriorityFunction
  Properties:
    ServiceToken: !GetAtt RulePriorityFunction.Arn
    {{- if eq .ServiceType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPSListenerArn
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn
    {{- end}}

HTTPListenerRuleWithDomain:
  Metadata:
    'aws:copilot:description': 'An HTTP listener rule that redirects HTTP to HTTPS'
  Type: AWS::ElasticLoadBalancingV2::ListenerRule
  Properties:
    Actions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: 443
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: HTTP_301
    Conditions:
{{- if .Aliases }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values: {{ fmtSlice .Aliases }}
{{- else }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values:
            - Fn::Join:
              - '.'
              - - !Ref WorkloadName
                - Fn::ImportValue:
                    !Sub "${AppName}-${EnvName}-SubDomain"
{{- end}}
      - Field: 'path-pattern'
        PathPatternConfig:
          Values:
            !If
              - IsDefaultRootPath
              -
                - "/*"
              -
                - !Sub "/${RulePath}"
                - !Sub "/${RulePath}/*"
    {{- if eq .ServiceType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPListenerArn
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPListenerArn
    {{- end}}
    Priority: !GetAtt HTTPSRulePriorityAction.Priority # Same priority as HTTPS Listener

HTTPSListenerRule:
  Metadata:
    'aws:copilot:description': 'An HTTPS listener rule for forwarding HTTPS traffic to your tasks'
  Type: AWS::ElasticLoadBalancingV2::ListenerRule
  Properties:
    Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
    Conditions:
{{- if .AllowedSourceIps}}
      - Field: 'source-ip'
        SourceIpConfig:
          Values:
{{- range $sourceIP := .AllowedSourceIps}}
          - {{$sourceIP}}
{{- end}}
{{- end}}
{{- if .Aliases }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values: {{ fmtSlice .Aliases }}
{{- else }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values:
            - Fn::Join:
              - '.'
              - - !Ref WorkloadName
                - Fn::ImportValue:
                    !Sub "${AppName}-${EnvName}-SubDomain"
{{- end}}
      - Field: 'path-pattern'
        PathPatternConfig:
          Values:
            !If
              - IsDefaultRootPath
              -
                - "/*"
              -
                - !Sub "/${RulePath}"
                - !Sub "/${RulePath}/*"
    {{- if eq .ServiceType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPSListenerArn
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn
    {{- end}}
    Priority: !GetAtt HTTPSRulePriorityAction.Priority