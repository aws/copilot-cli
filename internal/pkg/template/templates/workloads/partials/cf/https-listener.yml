{{- if not .ALBListener.Aliases}}
LoadBalancerDNSAlias:
  Metadata:
    'aws:copilot:description': 'The default alias record for the application load balancer'
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneId:
      Fn::ImportValue:
        !Sub "${AppName}-${EnvName}-HostedZone"
    Comment: !Sub "LoadBalancer alias for service ${WorkloadName}"
    RecordSets:
    - Name:
        !Join
          - '.'
          - - !Ref WorkloadName
            - Fn::ImportValue:
                !Sub "${AppName}-${EnvName}-SubDomain"
            - ""
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt EnvControllerAction.PublicLoadBalancerHostedZone
        DNSName: !GetAtt EnvControllerAction.PublicLoadBalancerDNSName
{{- else}}
{{- range $hostedZoneID, $aliases := .ALBListener.HostedZoneAliases}}
LoadBalancerDNSAlias{{$hostedZoneID}}:
  Metadata:
    'aws:copilot:description': 'Alias records for the application load balancer in hosted zone {{$hostedZoneID}}'
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneId: {{$hostedZoneID}}
    Comment: !Sub "LoadBalancer aliases for service ${WorkloadName} in hosted zone {{$hostedZoneID}}"
    RecordSets:
    {{- range $alias := $aliases}}
      - Name: {{quote $alias}}
        Type: A
        AliasTarget:
          {{- if eq $.WorkloadType "Backend Service"}}
          HostedZoneId: !GetAtt EnvControllerAction.InternalLoadBalancerHostedZone
          DNSName: !GetAtt EnvControllerAction.InternalLoadBalancerDNSName
          {{- else}}
          HostedZoneId: !GetAtt EnvControllerAction.PublicLoadBalancerHostedZone
          DNSName: !GetAtt EnvControllerAction.PublicLoadBalancerDNSName
          {{- end}}
    {{- end}}
{{- end}}
{{- end}}

HTTPSRulePriorityAction:
  Metadata:
    'aws:copilot:description': 'A custom resource assigning priority for HTTPS listener rules'
  Type: Custom::RulePriorityFunction
  Properties:
    ServiceToken: !GetAtt RulePriorityFunction.Arn
    RulePath: {{ fmtSlice (quoteSlice .ALBListener.RulePaths) }}
    {{- if eq $.WorkloadType "Backend Service" }}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPSListenerArn
    {{- else if $.ImportedALB}}
    {{- range $listener := $.ImportedALB.Listeners}}
    ListenerArn: {{$listener.ARN}}
    {{- end}}
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn
    {{- end}}

HTTPRuleWithDomainPriorityAction:
  Metadata:
    'aws:copilot:description': 'A custom resource assigning priority for HTTP listener rules'
  Type: Custom::RulePriorityFunction
  Properties:
    ServiceToken: !GetAtt RulePriorityFunction.Arn
    RulePath: {{ fmtSlice (quoteSlice .ALBListener.RulePaths) }}
    {{- if eq $.WorkloadType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPListenerArn
    {{- else if $.ImportedALB}}
    {{- range $listener := $.ImportedALB.Listeners}}
    ListenerArn: {{$listener.ARN}}
    {{- end}}
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPListenerArn
    {{- end}}

{{- range $i, $rule := .ALBListener.Rules}}
HTTPListenerRuleWithDomain{{ if ne $i 0 }}{{ $i }}{{ end }}:
  Metadata:
    {{- if $rule.RedirectToHTTPS}}
    'aws:copilot:description': 'An HTTP listener rule for path `{{$rule.Path}}` that redirects HTTP to HTTPS'
    {{- else}}
    'aws:copilot:description': 'An HTTP listener rule for path `{{$rule.Path}}` that forwards HTTP traffic to your tasks'
    {{- end}}
  Type: AWS::ElasticLoadBalancingV2::ListenerRule
  Properties:
    Actions:
      {{- if $rule.RedirectToHTTPS}}
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: 443
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: HTTP_301
      {{- else}}
      - TargetGroupArn: !Ref TargetGroup{{ if ne $i 0 }}{{ $i }}{{ end }}
        Type: forward
      {{- end}}
    Conditions:
      {{- if $rule.AllowedSourceIps }}
      - Field: 'source-ip'
        SourceIpConfig:
          Values:
            {{- range $sourceIP := $rule.AllowedSourceIps}}
            - {{$sourceIP}}
            {{- end}}
      {{- end}}
      {{- if $rule.Aliases }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values: {{ fmtSlice (quoteSlice $rule.Aliases) }}
      {{- else }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values:
            - Fn::Join:
              - '.'
              - - !Ref WorkloadName
                - Fn::ImportValue:
                    !Sub "${AppName}-${EnvName}-SubDomain"
      {{- end}}
      - Field: 'path-pattern'
        PathPatternConfig:
          Values:
            {{- if eq $rule.Path "/"}}
            - /*
            {{- else }}
            - {{ $rule.Path }}
            - {{ $rule.Path }}/*
            {{- end }}
    {{- if eq $.WorkloadType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPListenerArn
    {{- else if $.ImportedALB}}
    {{- range $listener := $.ImportedALB.Listeners}}
      {{- if eq $listener.Port 80}}
    ListenerArn: {{$listener.ARN}}
      {{- end }}
    {{- end}}
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPListenerArn
    {{- end}}
    Priority: !GetAtt HTTPRuleWithDomainPriorityAction.Priority{{ if ne $i 0 }}{{ $i }}{{ end }}

HTTPSListenerRule{{ if ne $i 0 }}{{ $i }}{{ end }}:
  Metadata:
    'aws:copilot:description': 'An HTTPS listener rule for path `{{$rule.Path}}` that forwards HTTPS traffic to your tasks'
  Type: AWS::ElasticLoadBalancingV2::ListenerRule
  Properties:
    Actions:
      - TargetGroupArn: !Ref TargetGroup{{ if ne $i 0 }}{{ $i }}{{ end }}
        Type: forward
    Conditions:
      {{- if $rule.AllowedSourceIps}}
      - Field: 'source-ip'
        SourceIpConfig:
          Values:
          {{- range $sourceIP := $rule.AllowedSourceIps}}
            - {{$sourceIP}}
          {{- end}}
      {{- end}}
      {{- if $rule.Aliases }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values: {{ fmtSlice (quoteSlice $rule.Aliases) }}
      {{- else }}
      - Field: 'host-header'
        HostHeaderConfig:
          Values:
            - Fn::Join:
              - '.'
              - - !Ref WorkloadName
                - Fn::ImportValue:
                    !Sub "${AppName}-${EnvName}-SubDomain"
      {{- end}}
      - Field: 'path-pattern'
        PathPatternConfig:
          Values:
          {{- if eq $rule.Path "/" }}
            - /*
          {{- else }}
            - {{ $rule.Path }}
            - {{ $rule.Path }}/*
          {{- end }}
    {{- if eq $.WorkloadType "Backend Service"}}
    ListenerArn: !GetAtt EnvControllerAction.InternalHTTPSListenerArn
    {{- else if $.ImportedALB}}
      {{- range $i, $listener := $.ImportedALB.Listeners}}
        {{- if eq $listener.Port 443}}
    ListenerArn: {{$listener.ARN}}
        {{- end}}
      {{- end}}
    {{- else}}
    ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn
    {{- end}}
    Priority: !GetAtt HTTPSRulePriorityAction.Priority{{ if ne $i 0 }}{{ $i }}{{ end }}
  {{- end }}