# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a static site backed by S3.

{{- if .SerializedManifest }}
Metadata:
  Manifest: |
{{indent 4 .SerializedManifest}}
{{- end }}

Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  AddonsTemplateURL:
    Description: URL of the addons nested stack template within the S3 bucket.
    Type: String
    Default: ""

Conditions:
  HasAddons: !Not [!Equals [!Ref AddonsTemplateURL, ""]]

Resources:
  CopyAssetsFunctionRole:
    Metadata:
      aws:copilot:description: An IAM Role
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CopyFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource: arn:aws:s3:::{{ .AssetMappingFileBucket }}/*
        - PolicyName: CopyToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource: !Sub arn:aws:s3:::${Bucket}/*
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CopyAssetsFunction:
    Metadata:
      aws:copilot:description: A lambda function
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CopyAssetsFunctionRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      Code:
        ZipFile: |
          var aws = require("aws-sdk");

          exports.handler = (event, context, callback) => {
            const s3 = new aws.S3();
            console.log("copy from cache bucket event:", event)
            const params = {
              CopySource: event.srcBucket + "/" + event.mapping.path,
              Bucket: event.destBucket,
              Key: event.mapping.destPath
            };
            console.log("copy object params", params)

            s3.copyObject(params, (err, data) => {
              if (err) {
                console.log("error copying object", err)
                callback(err);
                return;
              }

              console.log("copied object: ", data)
              callback(null, "Success");
            });
          };

  TriggerCopyStateMachineFunctionRole:
    Metadata:
      aws:copilot:description: An IAM Role for the lambda that triggers the file copying state machine.
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TriggerStateMachine
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartSyncExecution
                Resource: !GetAtt CopyAssetsStateMachine.Arn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TriggerCopyStateMachineFunction:
    Metadata:
      aws:copilot:description: A lambda that triggers the file copying state machine.
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerCopyStateMachineFunctionRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      Code:
        ZipFile: |
          var response = require("cfn-response");
          var aws = require("aws-sdk");

          exports.handler = (event, context) => {
            console.log("trigger state machine funtion: event", event)

            const sf = new aws.StepFunctions();
            const params = {
              stateMachineArn: event.ResourceProperties.StateMachineARN,
              input: JSON.stringify({
                FromBucket: event.ResourceProperties.FromBucket,
                AssetMappingFilePath: event.ResourceProperties.AssetMappingFilePath,
                ToBucket: event.ResourceProperties.ToBucket,
              })
            };
            sf.startSyncExecution(params, (err, data) => {
              if (err) {
                console.log("error executing step function", err)
                response.send(event, context, response.FAILED, {"error": err.message}, event.PhysicalResourceId)
                return;
              }

              console.log("finished step function execution:", data)
              response.send(event, context, response.SUCCESS, {}, event.PhysicalResourceId)
            });
          };

  TriggerStateMachineAction:
    Metadata:
      aws:copilot:description: A custom resource to trigger the file copying state machine
    Type: Custom::TriggerStateMachine
    DependsOn: CopyAssetsStateMachine
    Properties:
      ServiceToken: !GetAtt TriggerCopyStateMachineFunction.Arn
      StateMachineARN: !GetAtt CopyAssetsStateMachine.Arn
      FromBucket: {{ .AssetMappingFileBucket }}
      AssetMappingFilePath: {{ .AssetMappingFilePath }} # hash all of the files so that the state machine is triggered ONLY when all of the files have changed
      ToBucket: !Ref Bucket

  CopyAssetsStateMachineRole:
    Metadata:
      aws:copilot:description: An IAM Role
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt CopyAssetsFunction.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::{{ .AssetMappingFileBucket }}/{{ .AssetMappingFilePath }}
        - PolicyName: LoggingTODORemoveMe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogStream
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

  CopyAssetsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt CopyAssetsStateMachineRole.Arn
      StateMachineType: EXPRESS
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: arn:aws:logs:us-west-2:447368768304:log-group:/ecs/deleteme:*
      Definition:
        Comment: A test state machine
        StartAt: GetMappingFile
        States:
          GetMappingFile: # TODO: error handling?
            Type: Task
            Parameters:
              Bucket.$: $.FromBucket
              Key.$: $.AssetMappingFilePath
            Resource: arn:aws:states:::aws-sdk:s3:getObject
            ResultSelector:
              files.$: States.StringToJson($.Body)
            ResultPath: $.GetMappingFile
            Next: CopyFiles
          CopyFiles:
            Type: Map
            End: true
            ItemsPath: $.GetMappingFile.files
            ItemSelector:
              mapping.$: $$.Map.Item.Value
              destBucket.$: $.ToBucket
              srcBucket.$: $.FromBucket
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: CopyFile
              States:
                CopyFile:
                  Type: Task
                  End: true
                  Resource: !GetAtt CopyAssetsFunction.Arn
  
  Bucket:
    Metadata:
      aws:copilot:description: An S3 Bucket to store the static site's assets in
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  BucketPolicy:
    Metadata:
      aws:copilot:description: A bucket policy to deny unencrypted access to the bucket and its contents
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ForceHTTPS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub ${Bucket.Arn}
              - !Sub ${Bucket.Arn}/*
            Condition: 
              Bool:
                aws:SecureTransport: false
