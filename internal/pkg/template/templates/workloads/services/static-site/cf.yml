# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a static site backed by S3.

{{- /*
!¡!¡!¡!¡!¡!¡
If you are adding resources to this template, make sure to add the resources to
the TriggerStateMachineAction.DependsOn list. This will ensure that files
are only copied to Bucket if all other resources are successfully created.
!¡!¡!¡!¡!¡!¡
*/ -}}

{{- if .SerializedManifest }}
Metadata:
  Manifest: |
{{indent 4 .SerializedManifest}}
{{- end }}

Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  AddonsTemplateURL:
    Description: URL of the addons nested stack template within the S3 bucket.
    Type: String
    Default: ""

Conditions:
  HasAddons: !Not [!Equals [!Ref AddonsTemplateURL, ""]]

Resources:
  Bucket:
    Metadata:
      aws:copilot:description: An S3 Bucket to store the static site's assets
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  BucketPolicyForCloudFront:
    Metadata:
      'aws:copilot:description': 'A bucket policy to grant CloudFront read access to the Static Site bucket'
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource:
              - !Sub
                - arn:${AWS::Partition}:s3:::${bucket}
                - bucket: !Ref Bucket
              - !Sub
                - arn:${AWS::Partition}:s3:::${bucket}/*
                - bucket: !Ref Bucket
            Condition: 
              StringEquals:
                AWS:SourceArn: !Sub
                  - arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${cfDistributionID}
                  - cfDistributionID: !Ref CloudFrontDistribution

  CloudFrontOriginAccessControl:
    Metadata:
      'aws:copilot:description': 'Access control to make the content in the S3 bucket only accessible through CloudFront'
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
          Description: Access control for static s3 origin
          Name: !Sub 'copilot-${AppName}-${EnvName}-${WorkloadName}-origin-access-control'
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

  CloudFrontDistribution:
    Metadata:
      'aws:copilot:description': 'A CloudFront distribution for global content delivery'
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods: ["GET", "HEAD"]
          ViewerProtocolPolicy: allow-all
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # See https://go.aws/3bJid3k
          TargetOriginId: !Sub 'copilot-${AppName}-${EnvName}-${WorkloadName}'
        Enabled: true
        IPV6Enabled: true
        Origins:
          - Id: !Sub 'copilot-${AppName}-${EnvName}-${WorkloadName}'
            DomainName: !GetAtt Bucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            # Workaround for using Origin Access Control as Origin Access Identity is still 
            # required when the origin is an S3 bucket.
            S3OriginConfig:
              OriginAccessIdentity: '' 

  TriggerStateMachineFunction:
    Metadata:
      aws:copilot:description: A lambda that triggers the file-copying state machine
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerStateMachineFunctionRole.Arn
      Runtime: nodejs16.x
      Timeout: 900
      MemorySize: 512
      {{- with $cr := index .CustomResources "TriggerStateMachineFunction" }}
      Code:
        S3Bucket: {{$cr.Bucket}}
        S3Key: {{$cr.Key}}
      {{- end }}

  TriggerStateMachineFunctionRole:
    Metadata:
      aws:copilot:description: An IAM Role for the lambda that triggers the file-copying state machine.
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TriggerStateMachine
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartSyncExecution
                Resource: !GetAtt CopyAssetsStateMachine.Arn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TriggerStateMachineAction:
    Metadata:
      aws:copilot:description: A custom resource to trigger the file-copying state machine
    Type: Custom::TriggerStateMachine
    DependsOn: 
      - CopyAssetsStateMachine {{- /* This is a real dependency */}}
      - Bucket
      - BucketPolicyForCloudFront
      - CloudFrontOriginAccessControl
      - CloudFrontDistribution
      - TriggerStateMachineFunction
      - TriggerStateMachineFunctionRole
      - CopyAssetsStateMachine
      - CopyAssetsStateMachineRole
      - CopyAssetsFunction
      - CopyAssetsFunctionRole
      - EnvManagerS3Access
    Properties:
      ServiceToken: !GetAtt TriggerStateMachineFunction.Arn
      StateMachineARN: !GetAtt CopyAssetsStateMachine.Arn
      SourceBucket: {{ .AssetMappingFileBucket }}
      AssetMappingFilePath: {{ .AssetMappingFilePath }}
      DestinationBucket: !Ref Bucket

  CopyAssetsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt CopyAssetsStateMachineRole.Arn
      StateMachineType: EXPRESS
      Definition:
        Comment: A state machine that triggers a file-copying lambda for each uploaded asset
        StartAt: GetMappingFile
        States:
          GetMappingFile:
            Type: Task
            Parameters:
              Bucket.$: $.SourceBucket
              Key.$: $.AssetMappingFilePath
            Resource: arn:aws:states:::aws-sdk:s3:getObject
            ResultSelector:
              files.$: States.StringToJson($.Body)
            ResultPath: $.GetMappingFile
            Next: CopyFiles
          CopyFiles:
            Type: Map
            End: true
            ItemsPath: $.GetMappingFile.files
            ItemSelector:
              mapping.$: $$.Map.Item.Value
              destBucket.$: $.DestinationBucket
              srcBucket.$: $.SourceBucket
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: CopyFile
              States:
                CopyFile:
                  Type: Task
                  End: true
                  Resource: !GetAtt CopyAssetsFunction.Arn

  CopyAssetsStateMachineRole:
    Metadata:
      aws:copilot:description: An IAM Role for the state machine that triggers the copy lambda
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt CopyAssetsFunction.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::{{ .AssetMappingFileBucket }}/{{ .AssetMappingFilePath }}

  CopyAssetsFunction:
    Metadata:
      aws:copilot:description: A lambda function to copy assets into the static site bucket
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CopyAssetsFunctionRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      MemorySize: 512
      {{- with $cr := index .CustomResources "CopyAssetsFunction" }}
      Code:
        S3Bucket: {{$cr.Bucket}}
        S3Key: {{$cr.Key}}
      {{- end }}

  CopyAssetsFunctionRole:
    Metadata:
      aws:copilot:description: An IAM Role for the lambda that copies assets into the static site bucket
    Type: AWS::IAM::Role
    Properties:
      {{- if .PermissionsBoundary}}
      PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}
      {{- end}}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CopyFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::{{ .AssetMappingFileBucket }}/*
        - PolicyName: CopyToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${Bucket}/*
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  EnvManagerS3Access:
    Metadata:
      aws:copilot:description: A policy that gives the Env Manager role access to this site's S3 Bucket
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Sub "${AppName}-${EnvName}-EnvManagerRole"
      PolicyName: !Sub "${WorkloadName}-S3Access"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:DeleteObject
              - s3:DeleteObjectVersion
            Resource:
              - !Sub arn:aws:s3:::${Bucket}
              - !Sub arn:aws:s3:::${Bucket}/*
