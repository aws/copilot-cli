# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a backend service on Amazon ECS.
Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  AddonsTemplateURL:
    Description: 'URL of the addons nested stack template within the S3 bucket.'
    Type: String
    Default: ""
  LogRetention:
    Type: Number
    Default: 30
Conditions:
  HasAddons:
    !Not [!Equals [!Ref AddonsTemplateURL, ""]]
  ExposePort:
    !Not [!Equals [!Ref ContainerPort, -1]]
Resources:
{{include "loggroup" . | indent 2}}

  TaskDefinition:
    Metadata:
      'aws:copilot:description': 'An ECS task definition to group your containers and run them on ECS'
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
{{include "fargate-taskdef-base-properties" . | indent 6}}
      ContainerDefinitions:
{{include "workload-container" . | indent 8}}
{{include "sidecars" . | indent 8}}
{{- if .Storage -}}
{{include "volumes" . | indent 6}}
{{- end}}
{{include "executionrole" . | indent 2}}
{{include "taskrole" . | indent 2}}
{{include "servicediscovery" . | indent 2}}
{{- if .Autoscaling }}
{{include "autoscaling" . | indent 2}}
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "DelegateDesiredCountAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: ECS
              Effect: Allow
              Action:
                - ecs:DescribeServices
              Resource: "*"
              Condition: 
                ArnEquals: 
                  'ecs:cluster':
                    Fn::Sub:
                      - arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                      - ClusterName:
                          Fn::ImportValue:
                            !Sub '${AppName}-${EnvName}-ClusterId'
            - Sid: ResourceGroups
              Effect: Allow
              Action:
                - resource-groups:GetResources
              Resource: "*"
            - Sid: Tags
              Effect: Allow
              Action:
                - "tag:GetResources"
              Resource: "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
{{- end }}
  Service:
    DependsOn:
    - EnvControllerAction
    Metadata:
      'aws:copilot:description': 'An ECS service to run and maintain your tasks in the environment cluster'
    Type: AWS::ECS::Service
    Properties:
{{include "service-base-properties" . | indent 6}}
      ServiceRegistries: !If [ExposePort, [{RegistryArn: !GetAtt DiscoveryService.Arn, Port: !Ref ContainerPort}], !Ref "AWS::NoValue"]

{{include "efs-access-point" . | indent 2}}

{{include "addons" . | indent 2}}

{{include "publish" . | indent 2}}

{{include "env-controller" . | indent 2}}

Outputs:
  DiscoveryServiceARN:
    Description: ARN of the Discovery Service.
    Value: !GetAtt DiscoveryService.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DiscoveryServiceARN