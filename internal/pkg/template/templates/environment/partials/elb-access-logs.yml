ELBAccessLogsBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Condition: CreateALB
  DependsOn: ELBAccessLogsBucket
  Properties:
    Bucket: !Ref ELBAccessLogsBucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Action:
            - s3:PutObject
          Effect: Allow
          Resource:
            - !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':s3:::'
                - !Ref ELBAccessLogsBucket
                {{- if .PublicHTTPConfig.ELBAccessLogs.Prefix }}
                - '/'
                - {{ .PublicHTTPConfig.ELBAccessLogs.Prefix }}
                {{- end }}
                - '/AWSLogs/'
                - !Ref AWS::AccountId
                - '/*'
          Principal:
            AWS: !Join [ "", [ !Sub 'arn:${AWS::Partition}:iam::', !FindInMap [ RegionalConfigs, !Ref 'AWS::Region', ElbAccountId ], ":root" ] ]
ELBAccessLogsBucket:
  Metadata:
    "aws:copilot:description": "A S3 bucket for the Load Balancer's access logs"
  Type: AWS::S3::Bucket
  Properties:
    VersioningConfiguration:
      Status: Enabled
    BucketEncryption:
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256 
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true

ELBAccessLogsBucketCleanerAction:
  Metadata:
    'aws:copilot:description': 'A custom resource that empties the ELB access logs bucket'
  Type: Custom::BucketCleanerFunction
  Properties:
    ServiceToken: !GetAtt BucketCleanerFunction.Arn
    BucketName: !Ref ELBAccessLogsBucket

BucketCleanerFunction:
  Type: AWS::Lambda::Function
  Properties:
    {{- with $cr := index .CustomResources "BucketCleanerFunction" }}
    Code:
      S3Bucket: {{$cr.Bucket}}
      S3Key: {{$cr.Key}}
    {{- end}}
    Handler: "index.handler"
    Timeout: 900
    MemorySize: 512
    Role: !GetAtt 'ELBAccessLogsBucketCleanerRole.Arn'
    Runtime: nodejs18.x

ELBAccessLogsBucketCleanerRole:
  Metadata:
    'aws:copilot:description': 'An IAM role {{- if .PermissionsBoundary}} with permissions boundary {{.PermissionsBoundary}} {{- end}} to clean the ELB access logs bucket'
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        -
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
    {{- if .PermissionsBoundary}}
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/{{.PermissionsBoundary}}'
    {{- end}}
    Path: /
    Policies:
      - PolicyName: "CleanELBAccessLogs"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:DeleteObject
                - s3:DeleteObjectVersion
              Resource: 
                - !GetAtt ELBAccessLogsBucket.Arn
                - !Sub
                  - ${ BucketARN }/*
                  - BucketARN: !GetAtt ELBAccessLogsBucket.Arn
    ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole