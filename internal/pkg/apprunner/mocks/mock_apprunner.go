// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/apprunner/apprunner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	apprunner "github.com/aws/aws-sdk-go/service/apprunner"
	apprunner0 "github.com/aws/copilot-cli/internal/pkg/aws/apprunner"
	resourcegroups "github.com/aws/copilot-cli/internal/pkg/aws/resourcegroups"
	gomock "github.com/golang/mock/gomock"
)

// MockappRunnerClient is a mock of appRunnerClient interface.
type MockappRunnerClient struct {
	ctrl     *gomock.Controller
	recorder *MockappRunnerClientMockRecorder
}

// MockappRunnerClientMockRecorder is the mock recorder for MockappRunnerClient.
type MockappRunnerClientMockRecorder struct {
	mock *MockappRunnerClient
}

// NewMockappRunnerClient creates a new mock instance.
func NewMockappRunnerClient(ctrl *gomock.Controller) *MockappRunnerClient {
	mock := &MockappRunnerClient{ctrl: ctrl}
	mock.recorder = &MockappRunnerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappRunnerClient) EXPECT() *MockappRunnerClientMockRecorder {
	return m.recorder
}

// DescribeOperation mocks base method.
func (m *MockappRunnerClient) DescribeOperation(operationId, svcARN string) (*apprunner.OperationSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOperation", operationId, svcARN)
	ret0, _ := ret[0].(*apprunner.OperationSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOperation indicates an expected call of DescribeOperation.
func (mr *MockappRunnerClientMockRecorder) DescribeOperation(operationId, svcARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOperation", reflect.TypeOf((*MockappRunnerClient)(nil).DescribeOperation), operationId, svcARN)
}

// DescribeService mocks base method.
func (m *MockappRunnerClient) DescribeService(svcARN string) (*apprunner0.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeService", svcARN)
	ret0, _ := ret[0].(*apprunner0.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeService indicates an expected call of DescribeService.
func (mr *MockappRunnerClientMockRecorder) DescribeService(svcARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeService", reflect.TypeOf((*MockappRunnerClient)(nil).DescribeService), svcARN)
}

// StartDeployment mocks base method.
func (m *MockappRunnerClient) StartDeployment(svcARN string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeployment", svcARN)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeployment indicates an expected call of StartDeployment.
func (mr *MockappRunnerClientMockRecorder) StartDeployment(svcARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeployment", reflect.TypeOf((*MockappRunnerClient)(nil).StartDeployment), svcARN)
}

// WaitForOperation mocks base method.
func (m *MockappRunnerClient) WaitForOperation(operationId, svcARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForOperation", operationId, svcARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForOperation indicates an expected call of WaitForOperation.
func (mr *MockappRunnerClientMockRecorder) WaitForOperation(operationId, svcARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForOperation", reflect.TypeOf((*MockappRunnerClient)(nil).WaitForOperation), operationId, svcARN)
}

// MockresourceGetter is a mock of resourceGetter interface.
type MockresourceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockresourceGetterMockRecorder
}

// MockresourceGetterMockRecorder is the mock recorder for MockresourceGetter.
type MockresourceGetterMockRecorder struct {
	mock *MockresourceGetter
}

// NewMockresourceGetter creates a new mock instance.
func NewMockresourceGetter(ctrl *gomock.Controller) *MockresourceGetter {
	mock := &MockresourceGetter{ctrl: ctrl}
	mock.recorder = &MockresourceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceGetter) EXPECT() *MockresourceGetterMockRecorder {
	return m.recorder
}

// GetResourcesByTags mocks base method.
func (m *MockresourceGetter) GetResourcesByTags(resourceType string, tags map[string]string) ([]*resourcegroups.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesByTags", resourceType, tags)
	ret0, _ := ret[0].([]*resourcegroups.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesByTags indicates an expected call of GetResourcesByTags.
func (mr *MockresourceGetterMockRecorder) GetResourcesByTags(resourceType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesByTags", reflect.TypeOf((*MockresourceGetter)(nil).GetResourcesByTags), resourceType, tags)
}
