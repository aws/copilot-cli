// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/clean/static_site.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockbucketResourceGetter is a mock of bucketResourceGetter interface.
type MockbucketResourceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockbucketResourceGetterMockRecorder
}

// MockbucketResourceGetterMockRecorder is the mock recorder for MockbucketResourceGetter.
type MockbucketResourceGetterMockRecorder struct {
	mock *MockbucketResourceGetter
}

// NewMockbucketResourceGetter creates a new mock instance.
func NewMockbucketResourceGetter(ctrl *gomock.Controller) *MockbucketResourceGetter {
	mock := &MockbucketResourceGetter{ctrl: ctrl}
	mock.recorder = &MockbucketResourceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbucketResourceGetter) EXPECT() *MockbucketResourceGetterMockRecorder {
	return m.recorder
}

// BucketName mocks base method.
func (m *MockbucketResourceGetter) BucketName(app, env, svc string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketName", app, env, svc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketName indicates an expected call of BucketName.
func (mr *MockbucketResourceGetterMockRecorder) BucketName(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketName", reflect.TypeOf((*MockbucketResourceGetter)(nil).BucketName), app, env, svc)
}

// MockbucketEmptier is a mock of bucketEmptier interface.
type MockbucketEmptier struct {
	ctrl     *gomock.Controller
	recorder *MockbucketEmptierMockRecorder
}

// MockbucketEmptierMockRecorder is the mock recorder for MockbucketEmptier.
type MockbucketEmptierMockRecorder struct {
	mock *MockbucketEmptier
}

// NewMockbucketEmptier creates a new mock instance.
func NewMockbucketEmptier(ctrl *gomock.Controller) *MockbucketEmptier {
	mock := &MockbucketEmptier{ctrl: ctrl}
	mock.recorder = &MockbucketEmptierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbucketEmptier) EXPECT() *MockbucketEmptierMockRecorder {
	return m.recorder
}

// EmptyBucket mocks base method.
func (m *MockbucketEmptier) EmptyBucket(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyBucket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyBucket indicates an expected call of EmptyBucket.
func (mr *MockbucketEmptierMockRecorder) EmptyBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyBucket", reflect.TypeOf((*MockbucketEmptier)(nil).EmptyBucket), arg0)
}
