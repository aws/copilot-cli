// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy/patch/env.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockenvironmentTemplateUpdateGetter is a mock of environmentTemplateUpdateGetter interface.
type MockenvironmentTemplateUpdateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentTemplateUpdateGetterMockRecorder
}

// MockenvironmentTemplateUpdateGetterMockRecorder is the mock recorder for MockenvironmentTemplateUpdateGetter.
type MockenvironmentTemplateUpdateGetterMockRecorder struct {
	mock *MockenvironmentTemplateUpdateGetter
}

// NewMockenvironmentTemplateUpdateGetter creates a new mock instance.
func NewMockenvironmentTemplateUpdateGetter(ctrl *gomock.Controller) *MockenvironmentTemplateUpdateGetter {
	mock := &MockenvironmentTemplateUpdateGetter{ctrl: ctrl}
	mock.recorder = &MockenvironmentTemplateUpdateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenvironmentTemplateUpdateGetter) EXPECT() *MockenvironmentTemplateUpdateGetterMockRecorder {
	return m.recorder
}

// EnvironmentTemplate mocks base method.
func (m *MockenvironmentTemplateUpdateGetter) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate.
func (mr *MockenvironmentTemplateUpdateGetterMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*MockenvironmentTemplateUpdateGetter)(nil).EnvironmentTemplate), appName, envName)
}

// UpdateEnvironmentTemplate mocks base method.
func (m *MockenvironmentTemplateUpdateGetter) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplate", appName, envName, templateBody, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentTemplate indicates an expected call of UpdateEnvironmentTemplate.
func (mr *MockenvironmentTemplateUpdateGetterMockRecorder) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplate", reflect.TypeOf((*MockenvironmentTemplateUpdateGetter)(nil).UpdateEnvironmentTemplate), appName, envName, templateBody, cfnExecRoleARN)
}
