// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy/patch/env.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockenvironmentTemplateUpdateGetter is a mock of environmentTemplateUpdateGetter interface.
type MockenvironmentTemplateUpdateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentTemplateUpdateGetterMockRecorder
}

// MockenvironmentTemplateUpdateGetterMockRecorder is the mock recorder for MockenvironmentTemplateUpdateGetter.
type MockenvironmentTemplateUpdateGetterMockRecorder struct {
	mock *MockenvironmentTemplateUpdateGetter
}

// NewMockenvironmentTemplateUpdateGetter creates a new mock instance.
func NewMockenvironmentTemplateUpdateGetter(ctrl *gomock.Controller) *MockenvironmentTemplateUpdateGetter {
	mock := &MockenvironmentTemplateUpdateGetter{ctrl: ctrl}
	mock.recorder = &MockenvironmentTemplateUpdateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenvironmentTemplateUpdateGetter) EXPECT() *MockenvironmentTemplateUpdateGetterMockRecorder {
	return m.recorder
}

// Template mocks base method.
func (m *MockenvironmentTemplateUpdateGetter) Template(stackName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", stackName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockenvironmentTemplateUpdateGetterMockRecorder) Template(stackName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockenvironmentTemplateUpdateGetter)(nil).Template), stackName)
}

// UpdateEnvironmentTemplate mocks base method.
func (m *MockenvironmentTemplateUpdateGetter) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplate", appName, envName, templateBody, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentTemplate indicates an expected call of UpdateEnvironmentTemplate.
func (mr *MockenvironmentTemplateUpdateGetterMockRecorder) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplate", reflect.TypeOf((*MockenvironmentTemplateUpdateGetter)(nil).UpdateEnvironmentTemplate), appName, envName, templateBody, cfnExecRoleARN)
}

// Mockprogress is a mock of progress interface.
type Mockprogress struct {
	ctrl     *gomock.Controller
	recorder *MockprogressMockRecorder
}

// MockprogressMockRecorder is the mock recorder for Mockprogress.
type MockprogressMockRecorder struct {
	mock *Mockprogress
}

// NewMockprogress creates a new mock instance.
func NewMockprogress(ctrl *gomock.Controller) *Mockprogress {
	mock := &Mockprogress{ctrl: ctrl}
	mock.recorder = &MockprogressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockprogress) EXPECT() *MockprogressMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *Mockprogress) Start(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", label)
}

// Start indicates an expected call of Start.
func (mr *MockprogressMockRecorder) Start(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mockprogress)(nil).Start), label)
}

// Stop mocks base method.
func (m *Mockprogress) Stop(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", label)
}

// Stop indicates an expected call of Stop.
func (mr *MockprogressMockRecorder) Stop(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mockprogress)(nil).Stop), label)
}
