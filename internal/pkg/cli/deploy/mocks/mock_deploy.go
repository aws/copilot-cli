// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy/deploy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"
	time "time"

	cloudformation "github.com/aws/copilot-cli/internal/pkg/aws/cloudformation"
	s3 "github.com/aws/copilot-cli/internal/pkg/aws/s3"
	deploy "github.com/aws/copilot-cli/internal/pkg/deploy"
	cloudformation0 "github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation"
	dockerengine "github.com/aws/copilot-cli/internal/pkg/docker/dockerengine"
	repository "github.com/aws/copilot-cli/internal/pkg/repository"
	progress "github.com/aws/copilot-cli/internal/pkg/term/progress"
	workspace "github.com/aws/copilot-cli/internal/pkg/workspace"
	gomock "github.com/golang/mock/gomock"
)

// MockImageBuilderPusher is a mock of ImageBuilderPusher interface.
type MockImageBuilderPusher struct {
	ctrl     *gomock.Controller
	recorder *MockImageBuilderPusherMockRecorder
}

// MockImageBuilderPusherMockRecorder is the mock recorder for MockImageBuilderPusher.
type MockImageBuilderPusherMockRecorder struct {
	mock *MockImageBuilderPusher
}

// NewMockImageBuilderPusher creates a new mock instance.
func NewMockImageBuilderPusher(ctrl *gomock.Controller) *MockImageBuilderPusher {
	mock := &MockImageBuilderPusher{ctrl: ctrl}
	mock.recorder = &MockImageBuilderPusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageBuilderPusher) EXPECT() *MockImageBuilderPusherMockRecorder {
	return m.recorder
}

// BuildAndPush mocks base method.
func (m *MockImageBuilderPusher) BuildAndPush(docker repository.ContainerLoginBuildPusher, args *dockerengine.BuildArguments) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndPush", docker, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndPush indicates an expected call of BuildAndPush.
func (mr *MockImageBuilderPusherMockRecorder) BuildAndPush(docker, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndPush", reflect.TypeOf((*MockImageBuilderPusher)(nil).BuildAndPush), docker, args)
}

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockUploader) Upload(bucket, key string, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", bucket, key, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockUploaderMockRecorder) Upload(bucket, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploader)(nil).Upload), bucket, key, data)
}

// ZipAndUpload mocks base method.
func (m *MockUploader) ZipAndUpload(bucket, key string, files ...s3.NamedBinary) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{bucket, key}
	for _, a := range files {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZipAndUpload", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZipAndUpload indicates an expected call of ZipAndUpload.
func (mr *MockUploaderMockRecorder) ZipAndUpload(bucket, key interface{}, files ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{bucket, key}, files...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipAndUpload", reflect.TypeOf((*MockUploader)(nil).ZipAndUpload), varargs...)
}

// MockTemplater is a mock of Templater interface.
type MockTemplater struct {
	ctrl     *gomock.Controller
	recorder *MockTemplaterMockRecorder
}

// MockTemplaterMockRecorder is the mock recorder for MockTemplater.
type MockTemplaterMockRecorder struct {
	mock *MockTemplater
}

// NewMockTemplater creates a new mock instance.
func NewMockTemplater(ctrl *gomock.Controller) *MockTemplater {
	mock := &MockTemplater{ctrl: ctrl}
	mock.recorder = &MockTemplaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplater) EXPECT() *MockTemplaterMockRecorder {
	return m.recorder
}

// Template mocks base method.
func (m *MockTemplater) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockTemplaterMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockTemplater)(nil).Template))
}

// MockEndpointGetter is a mock of EndpointGetter interface.
type MockEndpointGetter struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointGetterMockRecorder
}

// MockEndpointGetterMockRecorder is the mock recorder for MockEndpointGetter.
type MockEndpointGetterMockRecorder struct {
	mock *MockEndpointGetter
}

// NewMockEndpointGetter creates a new mock instance.
func NewMockEndpointGetter(ctrl *gomock.Controller) *MockEndpointGetter {
	mock := &MockEndpointGetter{ctrl: ctrl}
	mock.recorder = &MockEndpointGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointGetter) EXPECT() *MockEndpointGetterMockRecorder {
	return m.recorder
}

// ServiceDiscoveryEndpoint mocks base method.
func (m *MockEndpointGetter) ServiceDiscoveryEndpoint() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDiscoveryEndpoint")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceDiscoveryEndpoint indicates an expected call of ServiceDiscoveryEndpoint.
func (mr *MockEndpointGetterMockRecorder) ServiceDiscoveryEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDiscoveryEndpoint", reflect.TypeOf((*MockEndpointGetter)(nil).ServiceDiscoveryEndpoint))
}

// MockVersionGetter is a mock of VersionGetter interface.
type MockVersionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockVersionGetterMockRecorder
}

// MockVersionGetterMockRecorder is the mock recorder for MockVersionGetter.
type MockVersionGetterMockRecorder struct {
	mock *MockVersionGetter
}

// NewMockVersionGetter creates a new mock instance.
func NewMockVersionGetter(ctrl *gomock.Controller) *MockVersionGetter {
	mock := &MockVersionGetter{ctrl: ctrl}
	mock.recorder = &MockVersionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionGetter) EXPECT() *MockVersionGetterMockRecorder {
	return m.recorder
}

// Version mocks base method.
func (m *MockVersionGetter) Version() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockVersionGetterMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockVersionGetter)(nil).Version))
}

// MockPublicCIDRBlocksGetter is a mock of PublicCIDRBlocksGetter interface.
type MockPublicCIDRBlocksGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPublicCIDRBlocksGetterMockRecorder
}

// MockPublicCIDRBlocksGetterMockRecorder is the mock recorder for MockPublicCIDRBlocksGetter.
type MockPublicCIDRBlocksGetterMockRecorder struct {
	mock *MockPublicCIDRBlocksGetter
}

// NewMockPublicCIDRBlocksGetter creates a new mock instance.
func NewMockPublicCIDRBlocksGetter(ctrl *gomock.Controller) *MockPublicCIDRBlocksGetter {
	mock := &MockPublicCIDRBlocksGetter{ctrl: ctrl}
	mock.recorder = &MockPublicCIDRBlocksGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicCIDRBlocksGetter) EXPECT() *MockPublicCIDRBlocksGetterMockRecorder {
	return m.recorder
}

// PublicCIDRBlocks mocks base method.
func (m *MockPublicCIDRBlocksGetter) PublicCIDRBlocks() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicCIDRBlocks")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicCIDRBlocks indicates an expected call of PublicCIDRBlocks.
func (mr *MockPublicCIDRBlocksGetterMockRecorder) PublicCIDRBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicCIDRBlocks", reflect.TypeOf((*MockPublicCIDRBlocksGetter)(nil).PublicCIDRBlocks))
}

// MockCustomResourcesUploader is a mock of CustomResourcesUploader interface.
type MockCustomResourcesUploader struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourcesUploaderMockRecorder
}

// MockCustomResourcesUploaderMockRecorder is the mock recorder for MockCustomResourcesUploader.
type MockCustomResourcesUploaderMockRecorder struct {
	mock *MockCustomResourcesUploader
}

// NewMockCustomResourcesUploader creates a new mock instance.
func NewMockCustomResourcesUploader(ctrl *gomock.Controller) *MockCustomResourcesUploader {
	mock := &MockCustomResourcesUploader{ctrl: ctrl}
	mock.recorder = &MockCustomResourcesUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomResourcesUploader) EXPECT() *MockCustomResourcesUploaderMockRecorder {
	return m.recorder
}

// UploadEnvironmentCustomResources mocks base method.
func (m *MockCustomResourcesUploader) UploadEnvironmentCustomResources(upload s3.CompressAndUploadFunc) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadEnvironmentCustomResources", upload)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadEnvironmentCustomResources indicates an expected call of UploadEnvironmentCustomResources.
func (mr *MockCustomResourcesUploaderMockRecorder) UploadEnvironmentCustomResources(upload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadEnvironmentCustomResources", reflect.TypeOf((*MockCustomResourcesUploader)(nil).UploadEnvironmentCustomResources), upload)
}

// UploadNetworkLoadBalancedWebServiceCustomResources mocks base method.
func (m *MockCustomResourcesUploader) UploadNetworkLoadBalancedWebServiceCustomResources(upload s3.CompressAndUploadFunc) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadNetworkLoadBalancedWebServiceCustomResources", upload)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadNetworkLoadBalancedWebServiceCustomResources indicates an expected call of UploadNetworkLoadBalancedWebServiceCustomResources.
func (mr *MockCustomResourcesUploaderMockRecorder) UploadNetworkLoadBalancedWebServiceCustomResources(upload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadNetworkLoadBalancedWebServiceCustomResources", reflect.TypeOf((*MockCustomResourcesUploader)(nil).UploadNetworkLoadBalancedWebServiceCustomResources), upload)
}

// UploadRequestDrivenWebServiceCustomResources mocks base method.
func (m *MockCustomResourcesUploader) UploadRequestDrivenWebServiceCustomResources(upload s3.CompressAndUploadFunc) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadRequestDrivenWebServiceCustomResources", upload)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadRequestDrivenWebServiceCustomResources indicates an expected call of UploadRequestDrivenWebServiceCustomResources.
func (mr *MockCustomResourcesUploaderMockRecorder) UploadRequestDrivenWebServiceCustomResources(upload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadRequestDrivenWebServiceCustomResources", reflect.TypeOf((*MockCustomResourcesUploader)(nil).UploadRequestDrivenWebServiceCustomResources), upload)
}

// MockSNSTopicsLister is a mock of SNSTopicsLister interface.
type MockSNSTopicsLister struct {
	ctrl     *gomock.Controller
	recorder *MockSNSTopicsListerMockRecorder
}

// MockSNSTopicsListerMockRecorder is the mock recorder for MockSNSTopicsLister.
type MockSNSTopicsListerMockRecorder struct {
	mock *MockSNSTopicsLister
}

// NewMockSNSTopicsLister creates a new mock instance.
func NewMockSNSTopicsLister(ctrl *gomock.Controller) *MockSNSTopicsLister {
	mock := &MockSNSTopicsLister{ctrl: ctrl}
	mock.recorder = &MockSNSTopicsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSNSTopicsLister) EXPECT() *MockSNSTopicsListerMockRecorder {
	return m.recorder
}

// ListSNSTopics mocks base method.
func (m *MockSNSTopicsLister) ListSNSTopics(appName, envName string) ([]deploy.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSNSTopics", appName, envName)
	ret0, _ := ret[0].([]deploy.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSNSTopics indicates an expected call of ListSNSTopics.
func (mr *MockSNSTopicsListerMockRecorder) ListSNSTopics(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSNSTopics", reflect.TypeOf((*MockSNSTopicsLister)(nil).ListSNSTopics), appName, envName)
}

// MockServiceDeployer is a mock of ServiceDeployer interface.
type MockServiceDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDeployerMockRecorder
}

// MockServiceDeployerMockRecorder is the mock recorder for MockServiceDeployer.
type MockServiceDeployerMockRecorder struct {
	mock *MockServiceDeployer
}

// NewMockServiceDeployer creates a new mock instance.
func NewMockServiceDeployer(ctrl *gomock.Controller) *MockServiceDeployer {
	mock := &MockServiceDeployer{ctrl: ctrl}
	mock.recorder = &MockServiceDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDeployer) EXPECT() *MockServiceDeployerMockRecorder {
	return m.recorder
}

// DeployService mocks base method.
func (m *MockServiceDeployer) DeployService(out progress.FileWriter, conf cloudformation0.StackConfiguration, bucketName string, opts ...cloudformation.StackOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{out, conf, bucketName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployService indicates an expected call of DeployService.
func (mr *MockServiceDeployerMockRecorder) DeployService(out, conf, bucketName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out, conf, bucketName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployService", reflect.TypeOf((*MockServiceDeployer)(nil).DeployService), varargs...)
}

// MockServiceForceUpdater is a mock of ServiceForceUpdater interface.
type MockServiceForceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceForceUpdaterMockRecorder
}

// MockServiceForceUpdaterMockRecorder is the mock recorder for MockServiceForceUpdater.
type MockServiceForceUpdaterMockRecorder struct {
	mock *MockServiceForceUpdater
}

// NewMockServiceForceUpdater creates a new mock instance.
func NewMockServiceForceUpdater(ctrl *gomock.Controller) *MockServiceForceUpdater {
	mock := &MockServiceForceUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceForceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceForceUpdater) EXPECT() *MockServiceForceUpdaterMockRecorder {
	return m.recorder
}

// ForceUpdateService mocks base method.
func (m *MockServiceForceUpdater) ForceUpdateService(app, env, svc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceUpdateService", app, env, svc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceUpdateService indicates an expected call of ForceUpdateService.
func (mr *MockServiceForceUpdaterMockRecorder) ForceUpdateService(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateService", reflect.TypeOf((*MockServiceForceUpdater)(nil).ForceUpdateService), app, env, svc)
}

// LastUpdatedAt mocks base method.
func (m *MockServiceForceUpdater) LastUpdatedAt(app, env, svc string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUpdatedAt", app, env, svc)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastUpdatedAt indicates an expected call of LastUpdatedAt.
func (mr *MockServiceForceUpdaterMockRecorder) LastUpdatedAt(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUpdatedAt", reflect.TypeOf((*MockServiceForceUpdater)(nil).LastUpdatedAt), app, env, svc)
}

// MockWorkspaceReader is a mock of WorkspaceReader interface.
type MockWorkspaceReader struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceReaderMockRecorder
}

// MockWorkspaceReaderMockRecorder is the mock recorder for MockWorkspaceReader.
type MockWorkspaceReaderMockRecorder struct {
	mock *MockWorkspaceReader
}

// NewMockWorkspaceReader creates a new mock instance.
func NewMockWorkspaceReader(ctrl *gomock.Controller) *MockWorkspaceReader {
	mock := &MockWorkspaceReader{ctrl: ctrl}
	mock.recorder = &MockWorkspaceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceReader) EXPECT() *MockWorkspaceReaderMockRecorder {
	return m.recorder
}

// Path mocks base method.
func (m *MockWorkspaceReader) Path() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Path indicates an expected call of Path.
func (mr *MockWorkspaceReaderMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWorkspaceReader)(nil).Path))
}

// ReadWorkloadManifest mocks base method.
func (m *MockWorkspaceReader) ReadWorkloadManifest(name string) (workspace.WorkloadManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWorkloadManifest", name)
	ret0, _ := ret[0].(workspace.WorkloadManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWorkloadManifest indicates an expected call of ReadWorkloadManifest.
func (mr *MockWorkspaceReaderMockRecorder) ReadWorkloadManifest(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWorkloadManifest", reflect.TypeOf((*MockWorkspaceReader)(nil).ReadWorkloadManifest), name)
}

// MockInterpolator is a mock of Interpolator interface.
type MockInterpolator struct {
	ctrl     *gomock.Controller
	recorder *MockInterpolatorMockRecorder
}

// MockInterpolatorMockRecorder is the mock recorder for MockInterpolator.
type MockInterpolatorMockRecorder struct {
	mock *MockInterpolator
}

// NewMockInterpolator creates a new mock instance.
func NewMockInterpolator(ctrl *gomock.Controller) *MockInterpolator {
	mock := &MockInterpolator{ctrl: ctrl}
	mock.recorder = &MockInterpolatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterpolator) EXPECT() *MockInterpolatorMockRecorder {
	return m.recorder
}

// Interpolate mocks base method.
func (m *MockInterpolator) Interpolate(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interpolate", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interpolate indicates an expected call of Interpolate.
func (mr *MockInterpolatorMockRecorder) Interpolate(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interpolate", reflect.TypeOf((*MockInterpolator)(nil).Interpolate), s)
}

// MockProgress is a mock of Progress interface.
type MockProgress struct {
	ctrl     *gomock.Controller
	recorder *MockProgressMockRecorder
}

// MockProgressMockRecorder is the mock recorder for MockProgress.
type MockProgressMockRecorder struct {
	mock *MockProgress
}

// NewMockProgress creates a new mock instance.
func NewMockProgress(ctrl *gomock.Controller) *MockProgress {
	mock := &MockProgress{ctrl: ctrl}
	mock.recorder = &MockProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgress) EXPECT() *MockProgressMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockProgress) Start(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", label)
}

// Start indicates an expected call of Start.
func (mr *MockProgressMockRecorder) Start(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProgress)(nil).Start), label)
}

// Stop mocks base method.
func (m *MockProgress) Stop(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", label)
}

// Stop indicates an expected call of Stop.
func (mr *MockProgressMockRecorder) Stop(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProgress)(nil).Stop), label)
}

// MockmanifestReader is a mock of manifestReader interface.
type MockmanifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockmanifestReaderMockRecorder
}

// MockmanifestReaderMockRecorder is the mock recorder for MockmanifestReader.
type MockmanifestReaderMockRecorder struct {
	mock *MockmanifestReader
}

// NewMockmanifestReader creates a new mock instance.
func NewMockmanifestReader(ctrl *gomock.Controller) *MockmanifestReader {
	mock := &MockmanifestReader{ctrl: ctrl}
	mock.recorder = &MockmanifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanifestReader) EXPECT() *MockmanifestReaderMockRecorder {
	return m.recorder
}

// ReadWorkloadManifest mocks base method.
func (m *MockmanifestReader) ReadWorkloadManifest(name string) (workspace.WorkloadManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWorkloadManifest", name)
	ret0, _ := ret[0].(workspace.WorkloadManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWorkloadManifest indicates an expected call of ReadWorkloadManifest.
func (mr *MockmanifestReaderMockRecorder) ReadWorkloadManifest(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWorkloadManifest", reflect.TypeOf((*MockmanifestReader)(nil).ReadWorkloadManifest), name)
}

// MockpathFinder is a mock of pathFinder interface.
type MockpathFinder struct {
	ctrl     *gomock.Controller
	recorder *MockpathFinderMockRecorder
}

// MockpathFinderMockRecorder is the mock recorder for MockpathFinder.
type MockpathFinderMockRecorder struct {
	mock *MockpathFinder
}

// NewMockpathFinder creates a new mock instance.
func NewMockpathFinder(ctrl *gomock.Controller) *MockpathFinder {
	mock := &MockpathFinder{ctrl: ctrl}
	mock.recorder = &MockpathFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpathFinder) EXPECT() *MockpathFinderMockRecorder {
	return m.recorder
}

// Path mocks base method.
func (m *MockpathFinder) Path() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Path indicates an expected call of Path.
func (mr *MockpathFinderMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockpathFinder)(nil).Path))
}

// MocktimeoutError is a mock of timeoutError interface.
type MocktimeoutError struct {
	ctrl     *gomock.Controller
	recorder *MocktimeoutErrorMockRecorder
}

// MocktimeoutErrorMockRecorder is the mock recorder for MocktimeoutError.
type MocktimeoutErrorMockRecorder struct {
	mock *MocktimeoutError
}

// NewMocktimeoutError creates a new mock instance.
func NewMocktimeoutError(ctrl *gomock.Controller) *MocktimeoutError {
	mock := &MocktimeoutError{ctrl: ctrl}
	mock.recorder = &MocktimeoutErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeoutError) EXPECT() *MocktimeoutErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MocktimeoutError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MocktimeoutErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MocktimeoutError)(nil).Error))
}

// Timeout mocks base method.
func (m *MocktimeoutError) Timeout() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MocktimeoutErrorMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MocktimeoutError)(nil).Timeout))
}
