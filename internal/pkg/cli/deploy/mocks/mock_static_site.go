// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy/static_site.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	asset "github.com/aws/copilot-cli/internal/pkg/deploy/upload/asset"
	gomock "github.com/golang/mock/gomock"
)

// MockcacheUploader is a mock of cacheUploader interface.
type MockcacheUploader struct {
	ctrl     *gomock.Controller
	recorder *MockcacheUploaderMockRecorder
}

// MockcacheUploaderMockRecorder is the mock recorder for MockcacheUploader.
type MockcacheUploaderMockRecorder struct {
	mock *MockcacheUploader
}

// NewMockcacheUploader creates a new mock instance.
func NewMockcacheUploader(ctrl *gomock.Controller) *MockcacheUploader {
	mock := &MockcacheUploader{ctrl: ctrl}
	mock.recorder = &MockcacheUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcacheUploader) EXPECT() *MockcacheUploaderMockRecorder {
	return m.recorder
}

// UploadToCache mocks base method.
func (m *MockcacheUploader) UploadToCache(source, dest string, opts *asset.UploadOpts) ([]asset.Cached, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToCache", source, dest, opts)
	ret0, _ := ret[0].([]asset.Cached)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadToCache indicates an expected call of UploadToCache.
func (mr *MockcacheUploaderMockRecorder) UploadToCache(source, dest, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToCache", reflect.TypeOf((*MockcacheUploader)(nil).UploadToCache), source, dest, opts)
}
