// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy/static_site.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	manifest "github.com/aws/copilot-cli/internal/pkg/manifest"
	gomock "github.com/golang/mock/gomock"
)

// MockfileUploader is a mock of fileUploader interface.
type MockfileUploader struct {
	ctrl     *gomock.Controller
	recorder *MockfileUploaderMockRecorder
}

// MockfileUploaderMockRecorder is the mock recorder for MockfileUploader.
type MockfileUploaderMockRecorder struct {
	mock *MockfileUploader
}

// NewMockfileUploader creates a new mock instance.
func NewMockfileUploader(ctrl *gomock.Controller) *MockfileUploader {
	mock := &MockfileUploader{ctrl: ctrl}
	mock.recorder = &MockfileUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileUploader) EXPECT() *MockfileUploaderMockRecorder {
	return m.recorder
}

// UploadFiles mocks base method.
func (m *MockfileUploader) UploadFiles(files []manifest.FileUpload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFiles", files)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFiles indicates an expected call of UploadFiles.
func (mr *MockfileUploaderMockRecorder) UploadFiles(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFiles", reflect.TypeOf((*MockfileUploader)(nil).UploadFiles), files)
}

// MockrootGetter is a mock of rootGetter interface.
type MockrootGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrootGetterMockRecorder
}

// MockrootGetterMockRecorder is the mock recorder for MockrootGetter.
type MockrootGetterMockRecorder struct {
	mock *MockrootGetter
}

// NewMockrootGetter creates a new mock instance.
func NewMockrootGetter(ctrl *gomock.Controller) *MockrootGetter {
	mock := &MockrootGetter{ctrl: ctrl}
	mock.recorder = &MockrootGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrootGetter) EXPECT() *MockrootGetterMockRecorder {
	return m.recorder
}

// ProjectRoot mocks base method.
func (m *MockrootGetter) ProjectRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProjectRoot indicates an expected call of ProjectRoot.
func (mr *MockrootGetterMockRecorder) ProjectRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRoot", reflect.TypeOf((*MockrootGetter)(nil).ProjectRoot))
}
