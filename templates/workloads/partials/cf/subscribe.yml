{{- if .Subscribe}}
EventsQueue:
  Type: AWS::SQS::Queue
  {{- if .Subscribe.Queue}}
  Properties:
    KmsMasterKeyId: 'alias/aws/sqs'
    {{- if .Subscribe.Queue.Retention}}
    MessageRetentionPeriod: {{.Subscribe.Queue.Retention}}
    {{- end}}
    {{- if .Subscribe.Queue.Delay}}
    DelaySeconds: {{.Subscribe.Queue.Delay}}
    {{- end}}
    {{- if .Subscribe.Queue.Timeout}}
    VisibilityTimeout: {{.Subscribe.Queue.Timeout}}
    {{- end}}
    {{- if .Subscribe.Queue.FIFO}}
    FifoQueue: true
    {{- if .Subscribe.Queue.FIFO.HighThroughput}}
    FifoThroughputLimit: 'perMessageGroupId'
    DeduplicationScope: 'messageGroup'
    {{- end}}
    {{- end}}
    {{- if .Subscribe.Queue.DeadLetter}}
    RedrivePolicy:
      deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
      maxReceiveCount: {{.Subscribe.Queue.DeadLetter.Tries}}
    {{- end}}
  {{- end}}

{{- if .Subscribe.Queue}}{{- if .Subscribe.Queue.DeadLetter}}
DeadLetterQueue:
  Type: AWS::SQS::Queue

DeadLetterPolicy:
  Type: AWS::SQS::QueuePolicy
  Properties:
    Queues: [!Ref 'DeadLetterQueue']
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Sid: Allow-TaskRole-Subscribe
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:GetMessage
            - sqs:DeleteMessage
          Resource: !GetAtt EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'TaskRole'
{{- end}}{{- end}}

QueuePolicy:
  Type: AWS::SQS::QueuePolicy
  Properties:
    Queues: [!Ref 'EventsQueue']
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Sid: Allow-TaskRole-Subscribe
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:GetMessage
            - sqs:DeleteMessage
          Resource: !GetAtt EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'TaskRole'
        {{- range $topic := .Subscribe.Topics}}
        {{- if not $topic.Queue}}
        - Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:SendMessage
          Resource: !GetAtt EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Join ['', [!Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:', !Ref AppName, '-', !Ref EnvName, '-{{logicalIDSafe $topic.Service}}-{{logicalIDSafe $topic.Name}}']]
        {{- end}}
        {{- end}}

{{- range $topic := .Subscribe.Topics}}
{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}SNSTopicSubscription:
  Type: AWS::SNS::Subscription
  Properties:
    TopicArn: !Join ['', [!Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:', !Ref AppName, '-', !Ref EnvName, '-{{logicalIDSafe $topic.Service}}-{{logicalIDSafe $topic.Name}}']]
    Protocol: 'sqs'
    {{- if $topic.Queue}}
    Endpoint: !GetAtt {{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue.Arn
    {{- else}}
    Endpoint: !GetAtt EventsQueue.Arn
    {{- end}}

{{- if $topic.Queue}}
{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue:
  Type: AWS::SQS::Queue
  Properties:
    KmsMasterKeyId: 'alias/aws/sqs'
    {{- if $topic.Queue.Retention}}
    MessageRetentionPeriod: {{$topic.Queue.Retention}}
    {{- end}}
    {{- if $topic.Queue.Delay}}
    DelaySeconds: {{$topic.Queue.Delay}}
    {{- end}}
    {{- if $topic.Queue.Timeout}}
    VisibilityTimeout: {{$topic.Queue.Timeout}}
    {{- end}}
    {{- if $topic.Queue.FIFO}}
    FifoQueue: true
    {{- if $topic.Queue.FIFO.HighThroughput}}
    FifoThroughputLimit: 'perMessageGroupId'
    DeduplicationScope: 'messageGroup'
    {{- end}}
    {{- end}}
    {{- if $topic.Queue.DeadLetter}}
    RedrivePolicy:
      deadLetterTargetArn: !GetAtt {{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}DeadLetterQueue.Arn
      maxReceiveCount: {{$topic.Queue.DeadLetter.Tries}}
    {{- end}}

{{- if $topic.Queue.DeadLetter}}
{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}DeadLetterQueue:
  Type: AWS::SQS::Queue

{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}DeadLetterPolicy:
  Type: AWS::SQS::QueuePolicy
  Properties:
    Queues: [!Ref '{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}DeadLetterQueue']
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Sid: Allow-TaskRole-Subscribe
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:GetMessage
            - sqs:DeleteMessage
          Resource: !GetAtt {{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'TaskRole'
{{- end}}

{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}QueuePolicy:
  Type: AWS::SQS::QueuePolicy
  Properties:
    Queues: [!Ref '{{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue']
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Sid: Allow-TaskRole-Subscribe
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:GetMessage
            - sqs:DeleteMessage
          Resource: !GetAtt {{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'TaskRole'
        - Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: 
            - sqs:SendMessage
          Resource: !GetAtt {{logicalIDSafe $topic.Service}}{{logicalIDSafe $topic.Name}}EventsQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Join ['', [!Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:', !Ref AppName, '-', !Ref EnvName, '-{{logicalIDSafe $topic.Service}}-{{logicalIDSafe $topic.Name}}']]
{{- end}}{{- end}}{{- end}}